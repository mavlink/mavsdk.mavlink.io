import{_ as a,c as e,al as i,o as n}from"./chunks/framework.JotrKMnz.js";const k=JSON.parse('{"title":"Building C++ Apps","description":"","frontmatter":{"github_branch":"v3"},"headers":[],"relativePath":"en/cpp/guide/toolchain.md","filePath":"en/cpp/guide/toolchain.md"}'),l={name:"en/cpp/guide/toolchain.md"};function t(p,s,r,h,o,d){return n(),e("div",null,s[0]||(s[0]=[i(`<h1 id="building-c-apps" tabindex="-1">Building C++ Apps <a class="header-anchor" href="#building-c-apps" aria-label="Permalink to &quot;Building C++ Apps&quot;">​</a></h1><p>The MAVSDK core C++ library is written in C++17 and exposes C++11 interfaces such as <code>std::function</code>. Therefore, applications using the library need to be C++11 or later as well.</p><p>Applications can be built using your preferred build system, compiler and linker toolchain. The only requirement is that the build system must be able to locate the MAVSDK C++ headers and libraries (installed as described <a href="./installation.html">here</a>).</p><p>MAVSDK itself uses the <a href="https://cmake.org/" target="_blank" rel="noreferrer">cmake</a> build system, and we recommend that you do too. <em>CMake</em> is an open-source, cross-platform toolchain that allows you to build your examples on macOS, Linux and Windows using the same build file definition.</p><p>Below we explain how to set up a minimal build setup (<strong>CMakeLists.txt</strong>) file for your application.</p><h2 id="build-definition-file-cmakelists-txt" tabindex="-1">Build Definition File - CMakeLists.txt <a class="header-anchor" href="#build-definition-file-cmakelists-txt" aria-label="Permalink to &quot;Build Definition File - CMakeLists.txt&quot;">​</a></h2><p><em>Cmake</em> uses a definition file named <strong>CMakeLists.txt</strong> to define the project. This specifies the name of the project, compiler flags for different platforms and targets, where to find dependencies (libraries and header files), source files to build, and the name of the generated binary. <strong>CMakeLists.txt</strong> is typically stored in the root directory of your app project.</p><p>The sections below show how you can set up the file for when the SDK is <a href="./installation.html">installed system wide</a> (the default) or <a href="./build.html#sdk_local_install">locally</a>.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>On Windows use the <a href="#sdk_local_install">local installation</a>.</p></div><p>A &quot;template&quot; <strong>CMakeLists.txt</strong> is shown below. Most of file is boilerplate - the main things you need to change are <em>your_project_name</em>, <em>your_executable_name</em> and <em>your_source_file</em>. You should also make sure that any plugins used by your app are listed in the <code>target_link_libraries</code> section.</p><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">cmake_minimum_required</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">VERSION</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 3.15)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Specify your project&#39;s name</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">project</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(your_project_name)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Specify at least C++11, better C++17</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CMAKE_CXX_STANDARD 17)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CMAKE_CXX_STANDARD_REQUIRED </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Enable strict handling of warnings</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">add_definitions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-Wall -Wextra -Werror&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Finds MAVSDK when installed system wide.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">find_package</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MAVSDK REQUIRED)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Specify your app&#39;s executable name, and list of source files used to create it.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">add_executable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(your_executable_name</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    your_source_file.cpp</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # ... any other source files</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Specify your app&#39;s executable name and a list of linked libraries</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">target_link_libraries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(your_executable_name</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    MAVSDK::mavsdk             </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#All apps link against mavsdk library</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    MAVSDK::mavsdk_action      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># If action plugin used by app ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    MAVSDK::mavsdk_telemetry   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#If telemetry plugin used by app ...</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # ... Any other linked libraries</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>The file format and required modifications are self-explanatory. If additional information is required see the <a href="https://cmake.org/cmake/help/latest/manual/cmake-commands.7.html" target="_blank" rel="noreferrer">cmake documentation</a>.</p></div><h2 id="building-the-app" tabindex="-1">Building the App <a class="header-anchor" href="#building-the-app" aria-label="Permalink to &quot;Building the App&quot;">​</a></h2><p>In order to build the application, the MAVSDK library and header files need to be installed.</p><h3 id="sdk_installed_system_wide" tabindex="-1">MAVSDK Installed System-wide <a class="header-anchor" href="#sdk_installed_system_wide" aria-label="Permalink to &quot;MAVSDK Installed System-wide {#sdk_installed_system_wide}&quot;">​</a></h3><p>If MAVSDK has been installed using the <strong>.deb</strong> or <strong>.rpm</strong> file from <a href="https://github.com/mavlink/MAVSDK/releases" target="_blank" rel="noreferrer">MAVSDK releases</a> it is installed in <code>/usr/</code>, so system-wide. If MAVSDK has been built from source and installed in <code>/usr/local</code>, we also consider that system-wide.</p><p>For this case <code>find_package(MAVSDK REQUIRED)</code> as used in <code>CMakeLists.txt</code> above should find the library automatically.</p><p>To build the example we would do:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   cmake</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -Bbuild</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -H.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   cmake</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --build</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -j8</span></span></code></pre></div><h3 id="sdk_local_install" tabindex="-1">MAVSDK Installed Locally <a class="header-anchor" href="#sdk_local_install" aria-label="Permalink to &quot;MAVSDK Installed Locally {#sdk_local_install}&quot;">​</a></h3><p>For Windows we need to install the library and header files locally by extracting <strong>mavsdk-windows-x64-release.zip</strong> file from <a href="https://github.com/mavlink/MAVSDK/releases" target="_blank" rel="noreferrer">MAVSDK releases</a>.</p><p>On macOS/Linux, you can also use locally installed library artefacts by <a href="./build.html">building from source</a> if that is required (e.g. during development in order not to conflict with a system-wide installed library).</p><p>For the case where the library is installed in some local directory, you need to specify this path using the <code>CMAKE_PREFIX_PATH</code>.</p><p>E.g. here there would be a directory called mavsdk just one directory up:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cmake</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -Bbuild</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -DCMAKE_PREFIX_PATH=../mavsdk</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -H.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cmake</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --build</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -j8</span></span></code></pre></div><h2 id="run-the-app" tabindex="-1">Run the App <a class="header-anchor" href="#run-the-app" aria-label="Permalink to &quot;Run the App&quot;">​</a></h2><p>To Execute the file (in your build directory):</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build/your_executable_name</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Run your new executable</span></span></code></pre></div><h2 id="release-build" tabindex="-1">Release Build <a class="header-anchor" href="#release-build" aria-label="Permalink to &quot;Release Build&quot;">​</a></h2><p>In order to build in Release mode where the file size is smaller and optimizations are turned on, do:</p><p><strong>macOS/Linux:</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>cmake -Bbuild -DCMAKE_BUILD_TYPE=Release -H.</span></span>
<span class="line"><span>cmake --build build -j8</span></span></code></pre></div><p><strong>Windows:</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>cmake -Bbuild -H.</span></span>
<span class="line"><span>cmake --build build -j8 --config Release</span></span></code></pre></div><h2 id="useful-links" tabindex="-1">Useful Links <a class="header-anchor" href="#useful-links" aria-label="Permalink to &quot;Useful Links&quot;">​</a></h2><p>We only show a small fraction of what <em>Cmake</em> is capable of! Check out the links below for more information and examples.</p><ul><li><a href="https://cmake.org/documentation/" target="_blank" rel="noreferrer">cmake resources page</a></li><li><a href="https://cmake.org/cmake/help/latest/" target="_blank" rel="noreferrer">cmake documentation</a> (latest)</li><li><a href="https://cmake.org/cmake/help/latest/manual/cmake-commands.7.html" target="_blank" rel="noreferrer">cmake commands</a></li></ul>`,37)]))}const u=a(l,[["render",t]]);export{k as __pageData,u as default};
