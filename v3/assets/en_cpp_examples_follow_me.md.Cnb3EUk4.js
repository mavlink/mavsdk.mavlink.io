import{_ as s,c as a,al as n,o as l}from"./chunks/framework.JotrKMnz.js";const i="/v3/assets/follow_me_example_qgc.CEkbKa_s.jpg",m=JSON.parse('{"title":"Example: Follow Me Mode","description":"","frontmatter":{"github_branch":"v3"},"headers":[],"relativePath":"en/cpp/examples/follow_me.md","filePath":"en/cpp/examples/follow_me.md"}'),p={name:"en/cpp/examples/follow_me.md"};function o(t,e,c,d,h,r){return l(),a("div",null,e[0]||(e[0]=[n('<h1 id="example-follow-me-mode" tabindex="-1">Example: Follow Me Mode <a class="header-anchor" href="#example-follow-me-mode" aria-label="Permalink to &quot;Example: Follow Me Mode&quot;">​</a></h1><p>This example demonstrates how to use the <a href="./../guide/follow_me.html">Follow Me</a> plugin. It shows how to send the drone both the current position of the target (<code>FollowMe::TargetLocation</code>) and the relative position at which it should follow (<code>FollowMe::Config</code>).</p><p><img src="'+i+`" alt="Follow Me QGC Screenshot"></p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>A real application using this API will get the position information from the underlying operating system. The example uses a fake position source (<code>FakeLocationProvider</code>) to enable it to be run on computers that do not have position information. The <code>FakeLocationProvider</code> emulates the typical usage of common positioning APIs used in Android, Linux and iPhone.</p></div><h2 id="run_example" tabindex="-1">Running the Example <a class="header-anchor" href="#run_example" aria-label="Permalink to &quot;Running the Example {#run_example}&quot;">​</a></h2><p>Special notes for this example:</p><ul><li>Before running this example you will need to install Boost libraries. For Linux this is done as shown below:<div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt-get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> libboost-all-dev</span></span></code></pre></div></li><li>To use <em>QGroundControl</em> with this example you <strong>must</strong> ensure that <em>GSC Position Streaming</em> is disabled (otherwise QGC and the SDK will both send position updates and they will conflict). To do this use the latest <em>QGC Daily Build</em> and ensure that the <strong><a href="https://docs.qgroundcontrol.com/en/SettingsView/General.html" target="_blank" rel="noreferrer">Application Setting &gt; General</a> &gt; Miscellaneous &gt; Stream GCS Position</strong> is set to <em>Never</em>.</li></ul><p>Otherwise the example is built and run in the normal way (<a href="./../examples/#trying_the_examples">as described here</a>).</p><p>The example terminal output should be similar to that shown below:</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>This is from a debug build of the SDK. A release build will omit the &quot;Debug&quot; messages.</p></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ ./follow_me udpin://0.0.0.0:14540</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>[01:55:59|Info ] DronecodeSDK version: 0.2.8 (dronecode_sdk_impl.cpp:25)</span></span>
<span class="line"><span>Wait for system to connect via heartbeat</span></span>
<span class="line"><span>[01:55:59|Info ] New device on: 127.0.0.1:14580 (udp_connection.cpp:200)</span></span>
<span class="line"><span>[01:55:59|Debug] New: System ID: 1 Comp ID: 1 (dronecode_sdk_impl.cpp:286)</span></span>
<span class="line"><span>[01:55:59|Debug] Component Autopilot added. (system_impl.cpp:335)</span></span>
<span class="line"><span>[01:56:00|Debug] Found 1 component(s). (system_impl.cpp:462)</span></span>
<span class="line"><span>[01:56:00|Debug] Discovered 4294967298 (system_impl.cpp:464)</span></span>
<span class="line"><span>Waiting for system to be ready</span></span>
<span class="line"><span>...</span></span>
<span class="line"><span>Waiting for system to be ready</span></span>
<span class="line"><span>System is ready</span></span>
<span class="line"><span>Armed</span></span>
<span class="line"><span>[01:56:07|Debug] MAVLink: info: ARMED by arm/disarm component command (system_impl.cpp:273)</span></span>
<span class="line"><span>In Air...</span></span>
<span class="line"><span>[01:56:07|Debug] MAVLink: info: Using minimum takeoff altitude: 2.50 m (system_impl.cpp:273)</span></span>
<span class="line"><span>[01:56:07|Debug] MAVLink: info: Takeoff detected (system_impl.cpp:273)</span></span>
<span class="line"><span>[01:56:07|Debug] MAVLink: info: Using minimum takeoff altitude: 2.50 m (system_impl.cpp:273)</span></span>
<span class="line"><span>[FlightMode: Takeoff] Vehicle is at: nan, nan degrees.</span></span>
<span class="line"><span>[FlightMode: Takeoff] Vehicle is at: nan, nan degrees.</span></span>
<span class="line"><span>[FlightMode: Hold] Vehicle is at: nan, nan degrees.</span></span>
<span class="line"><span>[01:56:12|Debug] Waiting for the system confirmation of the new configuration.. (follow_me_impl.cpp:81)</span></span>
<span class="line"><span>[FlightMode: FollowMe] Vehicle is at: nan, nan degrees.</span></span>
<span class="line"><span>[FlightMode: FollowMe] Vehicle is at: 47.3977, 8.54559 degrees.</span></span>
<span class="line"><span>[FlightMode: FollowMe] Vehicle is at: 47.3977, 8.54559 degrees.</span></span>
<span class="line"><span>[FlightMode: FollowMe] Vehicle is at: 47.3976, 8.54559 degrees.</span></span>
<span class="line"><span>[FlightMode: FollowMe] Vehicle is at: 47.3976, 8.54559 degrees.</span></span>
<span class="line"><span>[FlightMode: FollowMe] Vehicle is at: 47.3976, 8.54559 degrees.</span></span>
<span class="line"><span>[FlightMode: FollowMe] Vehicle is at: 47.3975, 8.54559 degrees.</span></span>
<span class="line"><span>[FlightMode: FollowMe] Vehicle is at: 47.3975, 8.54559 degrees.</span></span>
<span class="line"><span>[FlightMode: FollowMe] Vehicle is at: 47.3974, 8.54559 degrees.</span></span>
<span class="line"><span>[FlightMode: FollowMe] Vehicle is at: 47.3974, 8.54559 degrees.</span></span>
<span class="line"><span>[FlightMode: FollowMe] Vehicle is at: 47.3974, 8.54563 degrees.</span></span>
<span class="line"><span>[FlightMode: FollowMe] Vehicle is at: 47.3974, 8.54567 degrees.</span></span>
<span class="line"><span>[FlightMode: FollowMe] Vehicle is at: 47.3974, 8.5457 degrees.</span></span>
<span class="line"><span>[FlightMode: FollowMe] Vehicle is at: 47.3974, 8.54574 degrees.</span></span>
<span class="line"><span>[FlightMode: FollowMe] Vehicle is at: 47.3974, 8.54577 degrees.</span></span>
<span class="line"><span>[FlightMode: FollowMe] Vehicle is at: 47.3974, 8.54581 degrees.</span></span>
<span class="line"><span>[FlightMode: FollowMe] Vehicle is at: 47.3974, 8.54588 degrees.</span></span>
<span class="line"><span>[FlightMode: FollowMe] Vehicle is at: 47.3974, 8.54592 degrees.</span></span>
<span class="line"><span>[FlightMode: FollowMe] Vehicle is at: 47.3974, 8.54595 degrees.</span></span>
<span class="line"><span>[FlightMode: FollowMe] Vehicle is at: 47.3974, 8.54595 degrees.</span></span>
<span class="line"><span>[FlightMode: FollowMe] Vehicle is at: 47.3975, 8.54595 degrees.</span></span>
<span class="line"><span>[FlightMode: FollowMe] Vehicle is at: 47.3975, 8.54595 degrees.</span></span>
<span class="line"><span>[FlightMode: FollowMe] Vehicle is at: 47.3975, 8.54595 degrees.</span></span>
<span class="line"><span>[FlightMode: FollowMe] Vehicle is at: 47.3976, 8.54595 degrees.</span></span>
<span class="line"><span>[FlightMode: FollowMe] Vehicle is at: 47.3976, 8.54595 degrees.</span></span>
<span class="line"><span>[FlightMode: FollowMe] Vehicle is at: 47.3977, 8.54595 degrees.</span></span>
<span class="line"><span>[FlightMode: FollowMe] Vehicle is at: 47.3977, 8.54595 degrees.</span></span>
<span class="line"><span>[FlightMode: FollowMe] Vehicle is at: 47.3977, 8.54595 degrees.</span></span>
<span class="line"><span>[FlightMode: FollowMe] Vehicle is at: 47.3977, 8.54592 degrees.</span></span>
<span class="line"><span>[FlightMode: FollowMe] Vehicle is at: 47.3977, 8.54588 degrees.</span></span>
<span class="line"><span>[FlightMode: FollowMe] Vehicle is at: 47.3977, 8.54581 degrees.</span></span>
<span class="line"><span>[FlightMode: FollowMe] Vehicle is at: 47.3977, 8.54577 degrees.</span></span>
<span class="line"><span>[FlightMode: FollowMe] Vehicle is at: 47.3977, 8.54574 degrees.</span></span>
<span class="line"><span>[FlightMode: FollowMe] Vehicle is at: 47.3977, 8.5457 degrees.</span></span>
<span class="line"><span>[FlightMode: FollowMe] Vehicle is at: 47.3977, 8.54567 degrees.</span></span>
<span class="line"><span>[FlightMode: FollowMe] Vehicle is at: 47.3977, 8.54563 degrees.</span></span>
<span class="line"><span>[FlightMode: FollowMe] Vehicle is at: 47.3977, 8.54563 degrees.</span></span>
<span class="line"><span>waiting until landed</span></span>
<span class="line"><span>[01:56:53|Debug] MAVLink: info: Landing at current position (system_impl.cpp:273)</span></span>
<span class="line"><span>waiting until landed</span></span>
<span class="line"><span>...</span></span>
<span class="line"><span>waiting until landed</span></span>
<span class="line"><span>[01:57:12|Debug] MAVLink: info: Landing detected (system_impl.cpp:273)</span></span>
<span class="line"><span>[01:57:12|Debug] MAVLink: info: DISARMED by auto disarm on land (system_impl.cpp:273)</span></span>
<span class="line"><span>Landed...</span></span></code></pre></div><h2 id="how-it-works" tabindex="-1">How it works <a class="header-anchor" href="#how-it-works" aria-label="Permalink to &quot;How it works&quot;">​</a></h2><p>The example registers with <code>FakeLocationProvider</code> for location updates. These are passed to the Follow Me plugin, which in turn sends them to the vehicle.</p><p>The operation of the &quot;SDK-specific&quot; part of this code is discussed in the guide: <a href="./../guide/follow_me.html">Follow Me</a>.</p><h2 id="source_code" tabindex="-1">Source code <a class="header-anchor" href="#source_code" aria-label="Permalink to &quot;Source code {#source_code}&quot;">​</a></h2><ul><li><a href="https://github.com/mavlink/MAVSDK/blob/main/examples/follow_me/CMakeLists.txt" target="_blank" rel="noreferrer">CMakeLists.txt</a></li><li><a href="https://github.com/mavlink/MAVSDK/blob/main/examples/follow_me/CMakeLists.txt" target="_blank" rel="noreferrer">follow_me.cpp</a></li></ul>`,17)]))}const u=s(p,[["render",o]]);export{m as __pageData,u as default};
