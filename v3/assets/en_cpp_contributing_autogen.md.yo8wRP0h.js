import{_ as t,c as a,al as r,o}from"./chunks/framework.JotrKMnz.js";const n="/v3/assets/mavsdk_overview.BUQy44H8.png",i="/v3/assets/autogen_overview.DMQK_Qwt.png",g=JSON.parse('{"title":"Autogeneration","description":"","frontmatter":{"github_branch":"v3"},"headers":[],"relativePath":"en/cpp/contributing/autogen.md","filePath":"en/cpp/contributing/autogen.md"}'),l={name:"en/cpp/contributing/autogen.md"};function s(h,e,p,m,c,d){return o(),a("div",null,e[0]||(e[0]=[r('<h1 id="autogeneration" tabindex="-1">Autogeneration <a class="header-anchor" href="#autogeneration" aria-label="Permalink to &quot;Autogeneration&quot;">​</a></h1><p>MAVSDK is available in a number of different languages. These all share the same &quot;core&quot; MAVLink implementation written in C++. Most of the API-specific code for other languages is <em>autogenerated</em> from API definition files (and language-specific templates).</p><p>This approach means that we don&#39;t have to maintain a separate MAVLink implementation or API for each language. New features are implemented once in C++, and can then be automatically be rolled out in Python, Java, etc.</p><p>This page provides an overview of the architecture and explains how to add a feature using the autogeneration.</p><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h2><p>The common MAVLink implementation is written in C++ (it is part of MAVSDK-C++). The <code>mavsdk_server</code> exposes the MAVSDK-C++ API over <a href="https://grpc.io/" target="_blank" rel="noreferrer">gRPC</a> to the language bindings. The API for all languages is autogenerated from a common definition.</p><p><img src="'+n+'" alt="MAVSDK structure/architecture"></p><p>The following parts are autogenerated:</p><ul><li>MAVSDK-C++ API (i.e. header files)</li><li>Most of <code>mavsdk_server</code></li><li>Most of the language bindings</li></ul><p>Those parts are maintained manually:</p><ul><li>MAVSDK-C++ implementation (i.e. the MAVLink business logic)</li><li>New plugins need to be added to <code>mavsdk_server</code> (this may be automated in future)</li><li>The <code>System</code> wrapper in language bindings usually needs to be updated whenever a new plugin is added (this may be automated in future)</li></ul><p>The heart of the autogeneration system is the <a href="https://github.com/mavlink/mavsdk-proto" target="_blank" rel="noreferrer">MAVSDK-Proto</a> repository which is described <a href="#mechanisms">below</a>.</p><h2 id="mechanisms" tabindex="-1">Autogeneration Mechanisms <a class="header-anchor" href="#mechanisms" aria-label="Permalink to &quot;Autogeneration Mechanisms {#mechanisms}&quot;">​</a></h2><p>The autogeneration pipeline is shown below:</p><p><img src="'+i+'" alt="Autogeneration pipeline"></p><p>The main parts are:</p><ul><li><a href="https://github.com/mavlink/MAVSDK-Proto/tree/main/pb_plugins" target="_blank" rel="noreferrer"><code>protoc-gen-mavsdk</code></a>, which is a <code>protoc</code> custom plugin generating MAVSDK&#39;s code.</li><li><a href="https://github.com/mavlink/MAVSDK-Proto/tree/main/protos" target="_blank" rel="noreferrer">The API definition</a>, in the form of proto files.</li><li>Template files (per language, see e.g. the <a href="https://github.com/mavlink/MAVSDK-Python/tree/main/other/templates/py" target="_blank" rel="noreferrer">Python templates</a> or the <a href="https://github.com/mavlink/MAVSDK/tree/main/templates" target="_blank" rel="noreferrer">C++ templates</a>).</li></ul><p><code>protoc</code> takes the custom plugin (<code>protoc-gen-mavsdk</code>) and the template files as inputs, and generate source code out of it. The way it currently works is that it generates one source file out of each <code>*.proto</code> file. For instance, <code>action.proto</code> becomes <code>Action.java</code> in MAVSDK-Java.</p><p>In some languages (typically C++), we need to generate multiple source files out of one proto definition file, and this is the reason why the C++ generation script runs protoc <a href="https://github.com/mavlink/MAVSDK/blob/6434e0c6a7c25a3203d4652da13ea1944279beb1/tools/generate_from_protos.sh#L72-L74" target="_blank" rel="noreferrer">in</a> <a href="https://github.com/mavlink/MAVSDK/blob/6434e0c6a7c25a3203d4652da13ea1944279beb1/tools/generate_from_protos.sh#L76-L77" target="_blank" rel="noreferrer">multiple</a> <a href="https://github.com/mavlink/MAVSDK/blob/6434e0c6a7c25a3203d4652da13ea1944279beb1/tools/generate_from_protos.sh#L79-L81" target="_blank" rel="noreferrer">passes</a>, once <a href="https://github.com/mavlink/MAVSDK/blob/6434e0c6a7c25a3203d4652da13ea1944279beb1/tools/generate_from_protos.sh#L61" target="_blank" rel="noreferrer">for each template</a> (e.g. &quot;templates/plugin_h&quot; defines the templates to generate <code>action.h</code>, <code>telemetry.h</code>, ..., and &quot;templates/plugin_cpp&quot; is responsible for <code>action.cpp</code>, <code>telemetry.cpp</code>, ...).</p><p>All the MAVSDK repositories contain some kind of <code>generate_from_proto.sh</code> file, and a <code>templates/</code> directory:</p><ul><li>MAVSDK-C++: <a href="https://github.com/mavlink/MAVSDK/blob/main/tools/generate_from_protos.sh" target="_blank" rel="noreferrer">script</a>, <a href="https://github.com/mavlink/MAVSDK/tree/main/templates" target="_blank" rel="noreferrer">templates</a></li><li>MAVSDK-Python: <a href="https://github.com/mavlink/MAVSDK-Python/blob/main/other/tools/run_protoc.sh" target="_blank" rel="noreferrer">script</a>, <a href="https://github.com/mavlink/MAVSDK-Python/tree/main/other/templates/py" target="_blank" rel="noreferrer">templates</a></li><li>MAVSDK-Swift: <a href="https://github.com/mavlink/MAVSDK-Swift/blob/main/Sources/Mavsdk/tools/generate_from_protos.bash" target="_blank" rel="noreferrer">script</a>, <a href="https://github.com/mavlink/MAVSDK-Swift/tree/main/Sources/Mavsdk/templates" target="_blank" rel="noreferrer">templates</a></li><li>MAVSDK-Java: <a href="https://github.com/mavlink/MAVSDK-Java/blob/983b361aa42b9088abbf17037d762ac174b44308/sdk/build.gradle#L54-L73" target="_blank" rel="noreferrer">script</a>, <a href="https://github.com/mavlink/MAVSDK-Java/tree/main/sdk/templates" target="_blank" rel="noreferrer">templates</a></li><li>MAVSDK-C#: <a href="https://github.com/mavlink/MAVSDK-CSharp/blob/f989aae79a0d62d6b92bac9120a89fc85ba80006/MAVSDK-CSharp/MAVSDK/MAVSDK.csproj#L18-L31" target="_blank" rel="noreferrer">script</a>, <a href="https://github.com/mavlink/MAVSDK-CSharp/tree/main/MAVSDK-CSharp/MAVSDK/templates" target="_blank" rel="noreferrer">templates</a></li><li>MAVSDK-Go: <a href="https://github.com/mavlink/MAVSDK-Go/blob/main/tools/generate_from_protos.bash" target="_blank" rel="noreferrer">script</a>, <a href="https://github.com/mavlink/MAVSDK-Go/tree/main/templates" target="_blank" rel="noreferrer">templates</a></li></ul><h2 id="adding-a-new-feature" tabindex="-1">Adding a New Feature <a class="header-anchor" href="#adding-a-new-feature" aria-label="Permalink to &quot;Adding a New Feature&quot;">​</a></h2><p>When adding a new feature to MAVSDK it is important to think first about the API that is required, and later about the implementation needed to enable the feature. This is not only because MAVSDK strives to have a simple and safe API but also comes from the fact that a new feature needs to be defined in the API first and can then be implemented (using the autogenerated files) in a later step.</p><p>To add a new feature, follow the steps on <a href="./plugins.html#add-api-to-proto">how to write plugins</a>.</p>',24)]))}const f=t(l,[["render",s]]);export{g as __pageData,f as default};
