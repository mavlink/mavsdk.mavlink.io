import{_ as i,c as a,al as e,o as t}from"./chunks/framework.JotrKMnz.js";const c=JSON.parse('{"title":"Telemetry","description":"","frontmatter":{"github_branch":"v3"},"headers":[],"relativePath":"en/cpp/guide/telemetry.md","filePath":"en/cpp/guide/telemetry.md"}'),l={name:"en/cpp/guide/telemetry.md"};function n(h,s,p,r,k,d){return t(),a("div",null,s[0]||(s[0]=[e(`<h1 id="telemetry" tabindex="-1">Telemetry <a class="header-anchor" href="#telemetry" aria-label="Permalink to &quot;Telemetry&quot;">​</a></h1><p>The <a href="./../api_reference/classmavsdk_1_1_telemetry.html">Telemetry</a> class is used to get vehicle telemetry, including state and flight mode information.</p><p>All the methods have both synchronous and asynchronous versions, and users can set the rate at which the vehicle provides updates for each type of information. All the methods of a particular type (synchronous, asynchronous, and set_rate methods) are used in the same way.</p><h2 id="api-overview" tabindex="-1">API Overview <a class="header-anchor" href="#api-overview" aria-label="Permalink to &quot;API Overview&quot;">​</a></h2><p>The <code>Telemetry</code> API provides methods to return the following types of information:</p><ul><li><a href="./../api_reference/structmavsdk_1_1_telemetry_1_1_acceleration_frd.html">AccelerationFrd</a></li><li><a href="./../api_reference/structmavsdk_1_1_telemetry_1_1_actuator_control_target.html">ActuatorControlTarget</a></li><li><a href="./../api_reference/structmavsdk_1_1_telemetry_1_1_actuator_output_status.html">ActuatorOutputStatus</a></li><li><a href="./../api_reference/structmavsdk_1_1_telemetry_1_1_angular_velocity_body.html">AngularVelocityBody</a></li><li><a href="./../api_reference/structmavsdk_1_1_telemetry_1_1_angular_velocity_frd.html">AngularVelocityNed</a></li><li><a href="./../api_reference/structmavsdk_1_1_telemetry_1_1_battery.html">Battery</a> - voltage and percentage power remaining.</li><li><a href="./../api_reference/structmavsdk_1_1_telemetry_1_1_covariance.html">Covariance</a></li><li><a href="./../api_reference/structmavsdk_1_1_telemetry_1_1_euler_angle.html">EulerAngle</a> - vehicle attitude/orientation as Euler Angle</li><li><a href="./../api_reference/structmavsdk_1_1_telemetry_1_1_fixedwing_metrics.html">FixedwingMetrics</a></li><li><a href="./../api_reference/structmavsdk_1_1_telemetry_1_1_gps_info.html">GpsInfo</a> - type of fix, if any, and number of satellites.</li><li><a href="./../api_reference/structmavsdk_1_1_telemetry_1_1_ground_truth.html">GroundTruth</a></li><li><a href="./../api_reference/structmavsdk_1_1_telemetry_1_1_health.html">Health</a> - calibration status of various sensors and confirmation that position estimates are good enough for position control.</li><li><a href="./../api_reference/structmavsdk_1_1_telemetry_1_1_imu.html">Imu</a></li><li><a href="./../api_reference/structmavsdk_1_1_telemetry_1_1_magnetic_field_frd.html">MagneticFieldFrd</a></li><li><a href="./../api_reference/structmavsdk_1_1_telemetry_1_1_odometry.html">Odometry</a></li><li><a href="./../api_reference/structmavsdk_1_1_telemetry_1_1_position.html">Position</a> - latitude and longitude in degrees, and altitude relative to sea level and to the takeoff altitude.</li><li><a href="./../api_reference/structmavsdk_1_1_telemetry_1_1_position_body.html">PositionBody</a></li><li><a href="./../api_reference/structmavsdk_1_1_telemetry_1_1_position_ned.html">PositionNed</a></li><li><a href="./../api_reference/structmavsdk_1_1_telemetry_1_1_velocity_ned.html">VelocityNed</a></li><li><a href="./../api_reference/structmavsdk_1_1_telemetry_1_1_velocity_body.html">VelocityBody</a></li><li><a href="./../api_reference/structmavsdk_1_1_telemetry_1_1_position_velocity_ned.html">PositionVelocityNed</a></li><li><a href="./../api_reference/structmavsdk_1_1_telemetry_1_1_quaternion.html">Quaternion</a> - vehicle attitude/orientation as a quaternion</li><li><a href="./../api_reference/structmavsdk_1_1_telemetry_1_1_rc_status.html">RcStatus</a> - connection status, signal strength, and whether RC has ever been connected.</li><li><a href="./../api_reference/structmavsdk_1_1_telemetry_1_1_status_text.html">StatusText</a></li></ul><p>In addition there are a number of methods that return vehicle &quot;state&quot;:</p><ul><li>Current flight mode (<a href="./../api_reference/classmavsdk_1_1_telemetry.html#classmavsdk_1_1_telemetry_1a4972a3968e379d565e7700f2f51158dd">flight_mode()</a>).</li><li>Whether the vehicle is &quot;all healthy&quot; (aggregates the vehicle <a href="./../api_reference/structmavsdk_1_1_telemetry_1_1_health.html">Health</a> information). This is used to check if the vehicle is <em>ready</em> to arm.</li><li>Whether the vehicle is armed/disarmed.</li><li>Whether the vehicle is flying/in air.</li></ul><h2 id="create-the-plugin" tabindex="-1">Create the Plugin <a class="header-anchor" href="#create-the-plugin" aria-label="Permalink to &quot;Create the Plugin&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>Telemetry</code> objects are created in the same way as objects in other SDK plugins. General instructions are provided in the topic: <a href="./../guide/using_plugins.html">Using Plugins</a>.</p></div><p>The main steps are:</p><ol><li><a href="./../guide/connections.html">Create a connection</a> to a <code>system</code>. For example (basic code without error checking):<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>#include &lt;mavsdk/mavsdk.h&gt;</span></span>
<span class="line"><span>Mavsdk mavsdk{Mavsdk::Configuration{Mavsdk::ComponentType::GroundStation}};</span></span>
<span class="line"><span>ConnectionResult conn_result = mavsdk.add_udp_connection();</span></span>
<span class="line"><span>// Wait for the system to connect via heartbeat</span></span>
<span class="line"><span>while (mavsdk.system().size() == 0) {</span></span>
<span class="line"><span>   sleep_for(seconds(1));</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>// System got discovered.</span></span>
<span class="line"><span>System system = mavsdk.systems()[0];</span></span></code></pre></div></li><li>Create an instance of <code>Telemetry</code> with the <code>system</code>:<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>#include &lt;mavsdk/plugins/telemetry/telemetry.h&gt;</span></span>
<span class="line"><span>auto telemetry = Telemetry{system};</span></span></code></pre></div></li></ol><p>The <code>telemetry</code> object can then used to access the plugin API (as shown in the following sections).</p><h2 id="update-rate" tabindex="-1">Setting the Update Rate <a class="header-anchor" href="#update-rate" aria-label="Permalink to &quot;Setting the Update Rate {#update-rate}&quot;">​</a></h2><p>The telemetry update rate determines the frequency at which callbacks will be invoked with new information, and also the probable &quot;freshness&quot; of data obtained when using synchronous telemetry APIs. The default update rate depends on the autopilot and may also be limited by the characteristics of the communications channel. You can set the rate for <em>each</em> type of telemetry, and both synchronous or asynchronous rate-setting methods are provided.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>For PX4 running on hardware the <em>default</em> rates are set on a per-mode basis in <a href="https://github.com/PX4/Firmware/blob/master/src/modules/mavlink/mavlink_main.cpp#L2025" target="_blank" rel="noreferrer">mavlink_main.cpp</a> (search on <code>configure_stream</code>). For PX4 running on SITL, the default rates are defined in the <a href="https://docs.px4.io/master/en/concept/system_startup.html" target="_blank" rel="noreferrer">startup file</a>.</p></div><p>The rate-setting methods are all used in the same way, so we just show one example for both the asynchronous and synchronous methods below. In both cases we set the rate for position updates.</p><p>To set the position update rate synchronously (in this case using <a href="./../api_reference/classmavsdk_1_1_telemetry.html#classmavsdk_1_1_telemetry_1a665439f3d5f8c58b3ef3dd427cf4782b">set_rate_position()</a>):</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Set position update rate to 1 Hz.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Telemetry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::Result set_rate_result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> telemetry.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set_rate_position</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (set_rate_result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Telemetry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::Success) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // handle rate-setting failure (in this case print error)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Setting rate failed:&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> set_rate_result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>To set the position update rate asynchronously with <a href="./../api_reference/classmavsdk_1_1_telemetry.html#classmavsdk_1_1_telemetry_1ad7e5b576edb9398c8f5f2f14626b984a">set_rate_position_async()</a> (here we use a <em>promise</em> to block until we have a result):</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Setting rate updates...&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    auto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> prom </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make_shared</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Telemetry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&gt;();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    auto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> future_result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> prom-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get_future</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Set position update rate to 1 Hz.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    telemetry.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set_rate_position_async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, [</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">prom</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">](</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Telemetry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Result</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        prom-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set_value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //fulfill promise</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //Block until promise is fulfilled (in callback function)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Telemetry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::Result result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> future_result.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Telemetry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::Success) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // handle rate-setting failure (in this case print error)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Setting telemetry rate failed (&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;).&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="getting-regular-updates" tabindex="-1">Getting Regular Updates <a class="header-anchor" href="#getting-regular-updates" aria-label="Permalink to &quot;Getting Regular Updates&quot;">​</a></h2><p>The best way to get telemetry updates is to use the asynchronous methods. These methods are non-blocking; they take a callback function argument and return immediately. The callback will be invoked with a populated <code>struct</code> of the associated type as soon as an update message arrives from the vehicle. The rate at which this occurs can be set through the API <a href="#update-rate">as discussed above</a>.</p><p>For example, the <a href="./../api_reference/classmavsdk_1_1_telemetry.html#classmavsdk_1_1_telemetry_1a61bda57b3ca47000ea7e4758b2a33134">Telemetry::subscribe_position()</a> has the following prototype, where <code>callback</code> is called with a populated <a href="./../api_reference/classmavsdk_1_1_telemetry.html#classmavsdk_1_1_telemetry_1a978b371d636226e198995462afa63552">PositionCallback</a> function:</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mavsdk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Telemetry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">subscribe_position</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PositionCallback</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>The code fragment below shows this method being use with a lambda function for the callback, which simply prints out the current position and altitude).</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">telemetry.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">subscribe_position</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([](</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Telemetry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Position</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> position</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Altitude: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> position.relative_altitude_m </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot; m&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::endl</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">              &lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Latitude: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> position.latitude_deg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::endl</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">              &lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Longitude: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> position.longitude_deg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h2 id="detecting-changes-only" tabindex="-1">Detecting Changes (only) <a class="header-anchor" href="#detecting-changes-only" aria-label="Permalink to &quot;Detecting Changes (only)&quot;">​</a></h2><p>The asynchronous callbacks are updated every time new information is provided by the vehicle. For some types of telemetry you may only wish to report only when the value changes.</p><p>The example below shows how to use <a href="./../api_reference/classmavsdk_1_1_telemetry.html#classmavsdk_1_1_telemetry_1a53db5fb36bf10fbc7ac004a3be9100a4">subscribe_flight_mode()</a> to report only when the current flight mode changes. The example uses a lambda function callback that captures a variable for the last mode. This variable is compared to the current flight mode to determine whether the value has changed and needs to be reported.</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Set up callback to monitor flight mode &#39;changes&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Telemetry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::FlightMode oldFlightMode</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Telemetry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FlightMode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::Unknown;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">telemetry.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">subscribe_flight_mode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">oldFlightMode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">](</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Telemetry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FlightMode</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> flightMode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (oldFlightMode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> flightMode) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //Flight mode changed. Print!</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;FlightMode: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> flightMode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        oldFlightMode</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">flightMode;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //Save updated mode.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p>You can stop flight mode updates altogether with:</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">telemetry.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">subscribe_flight_mode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nullptr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>This same approach can be used to report only messages that meet some condition.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>In future we may add a mechanism <em>in the API</em> to support just reporting changes: <a href="https://github.com/mavlink/MAVSDK/issues/63" target="_blank" rel="noreferrer">Issue #63</a>.</p></div><h2 id="blocking-telemetry-requests-state-management" tabindex="-1">Blocking Telemetry Requests (State Management) <a class="header-anchor" href="#blocking-telemetry-requests-state-management" aria-label="Permalink to &quot;Blocking Telemetry Requests (State Management)&quot;">​</a></h2><p>Some commands/vehicle operations must be performed in a certain sequence, or can only be called when the vehicle reaches a certain state. For example, in order to takeoff the vehicle must first be armed, and in order to arm, the vehicle must have a home position/GPS lock. For these cases you will want to monitor for the vehicle being in a certain state and block other commands until it is ready to proceed.</p><p>Often the easiest approach is to use synchronous methods and poll for the result. For example, the following code shows how you might poll for whether the vehicle is ready to arm (<a href="./../api_reference/classmavsdk_1_1_telemetry.html#classmavsdk_1_1_telemetry_1ad6d833741b5576f07204d268c5cd4d06">health_all_ok()</a>).</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Check if vehicle is ready to arm</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">telemetry.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">health_all_ok</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Vehicle not ready to arm&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">this_thread</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sleep_for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">chrono</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">seconds</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// now ready to arm ...</span></span></code></pre></div><p>Similarly, you can use the asynchronous method and block</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Waiting for system to be ready&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    auto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> prom </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make_shared</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&gt;();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    auto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> future_result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> prom-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get_future</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    telemetry.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">subscribe_health_all_ok</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">prom</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">](</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //fulfill promise if health is OK</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (result) {</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// health OK</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            prom-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set_value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    future_result.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //Block until promise is fulfilled.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Now ready to arm</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Note that <code>prom-&gt;set_value()</code> must only be called once. If your code can potentially call this multiple times, remember to unsubscribe from the callback after it succeeds (e.g. using <code>telemetry.subscribe_health_all_ok(nullptr)</code>).</p></div><p>Depending on the architecture of your application, you may even wish to arm the vehicle in your callback function. Usually though it is easier to understand program flow using the approach above.</p><h2 id="further-information" tabindex="-1">Further Information <a class="header-anchor" href="#further-information" aria-label="Permalink to &quot;Further Information&quot;">​</a></h2><p>Additional information/examples for the Telemetry API are linked below:</p><ul><li><a href="./../examples/">SDK Examples</a></li><li>Integration tests: <ul><li><a href="https://github.com/mavlink/MAVSDK/blob/main/src/integration_tests/telemetry_async.cpp" target="_blank" rel="noreferrer">telemetry_async.cpp</a></li><li><a href="https://github.com/mavlink/MAVSDK/blob/main/src/integration_tests/telemetry_health.cpp" target="_blank" rel="noreferrer">telemetry_health.cpp</a></li><li><a href="https://github.com/mavlink/MAVSDK/blob/main/src/integration_tests/telemetry_modes.cpp" target="_blank" rel="noreferrer">telemetry_modes.cpp</a></li><li><a href="https://github.com/mavlink/MAVSDK/blob/main/src/integration_tests/telemetry_sync.cpp" target="_blank" rel="noreferrer">telemetry_sync.cpp</a></li></ul></li></ul>`,46)]))}const g=i(l,[["render",n]]);export{c as __pageData,g as default};
