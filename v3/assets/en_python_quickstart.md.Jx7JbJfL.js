import{_ as a,c as t,al as s,o as i}from"./chunks/framework.JotrKMnz.js";const n="/v3/assets/jmavsim_takeoff.0Q18uyxT.png",o="/v3/assets/mavsdk_pycharm.DgiV2MRi.png",m=JSON.parse('{"title":"Python QuickStart","description":"","frontmatter":{"github_branch":"v3"},"headers":[],"relativePath":"en/python/quickstart.md","filePath":"en/python/quickstart.md"}'),l={name:"en/python/quickstart.md"};function h(r,e,p,d,c,k){return i(),t("div",null,e[0]||(e[0]=[s(`<h1 id="python-quickstart" tabindex="-1">Python QuickStart <a class="header-anchor" href="#python-quickstart" aria-label="Permalink to &quot;Python QuickStart&quot;">​</a></h1><h2 id="prerequisites" tabindex="-1">Prerequisites <a class="header-anchor" href="#prerequisites" aria-label="Permalink to &quot;Prerequisites&quot;">​</a></h2><ul><li><strong>Python 3.6+:</strong> run <code>python --version</code> or <code>python3 --version</code> in a terminal to check the installed version.</li><li><strong>A running SITL instance</strong> (<a href="https://docs.px4.io/master/en/simulation/jmavsim.html" target="_blank" rel="noreferrer">jMAVSim</a>, <a href="https://docs.px4.io/master/en/simulation/gazebo.html" target="_blank" rel="noreferrer">gazebo</a>, …). A quick way to run a headless gazebo SITL instance using docker is documented <a href="https://github.com/jonasvautherin/px4-gazebo-headless" target="_blank" rel="noreferrer">here</a>.</li></ul><h2 id="install" tabindex="-1">Install <a class="header-anchor" href="#install" aria-label="Permalink to &quot;Install&quot;">​</a></h2><p>MAVSDK-Python is distributed through <a href="https://pypi.org/project/mavsdk/" target="_blank" rel="noreferrer">PyPi</a>, and can therefore be installed with <code>pip3</code>:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pip3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mavsdk</span></span></code></pre></div><p>Make sure that the output of this command confirms that the installation succeeded!</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>On some systems, you may have to run <code>pip3 install --user mavsdk</code>, or you may want to run in a Python venv.</p></div><p>For the quick start below we will also install the lightweight package called “aioconsole”. This provides a REPL (interactive shell) called <code>apython</code> that we can use for running asyncio code:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pip3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> aioconsole</span></span></code></pre></div><h2 id="run-sitl" tabindex="-1">Run SITL <a class="header-anchor" href="#run-sitl" aria-label="Permalink to &quot;Run SITL&quot;">​</a></h2><p>It is always good to make sure that SITL works before trying to connect MAVSDK to it. One way is to run the following commands in the <code>pxh&gt;</code> prompt when SITL is running:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>commander takeoff</span></span>
<span class="line"><span>commander land</span></span></code></pre></div><p>The simulated drone should takeoff and land. If it doesn&#39;t, it may mean that SITL is not ready, or that there is a problem.</p><h2 id="take-off-from-mavsdk" tabindex="-1">Take off from MAVSDK <a class="header-anchor" href="#take-off-from-mavsdk" aria-label="Permalink to &quot;Take off from MAVSDK&quot;">​</a></h2><p>When we know that the simulator is ready, we can open an <code>apython</code> REPL:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apython</span></span></code></pre></div><p>Import MAVSDK into the environment by entering:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mavsdk </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> System</span></span></code></pre></div><p>We then create a <code>System</code> object, in this case named <code>drone</code>, and make it connect to the drone (this object is our &quot;handle&quot; to access the rest of the MAVSDK functions):</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">drone </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> System()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> drone.connect()</span></span></code></pre></div><p>Once connected, we can arm and takeoff using the appropriate MAVSDK commands:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> drone.action.arm()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> drone.action.takeoff()</span></span></code></pre></div><p>If everything went well, your drone should takeoff. In the <code>pxh</code> console, you should see a log line like:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">INFO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [commander] Takeoff detected</span></span></code></pre></div><p>If running a graphical interface, you should see the drone taking off. Here is what it looks like in jMAVSim:</p><p><img src="`+n+`" alt="jMAVSim after a successful takeoff"></p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Make sure to send the <code>takeoff()</code> command within (at most) a few seconds of <code>arm()</code>; the drone will automatically disarm after a few seconds if it does not receive a command to takeoff.</p></div><p>You get an exception, as shown below:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">raise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ActionError(result, “arm()”)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mavsdk.generated.action.ActionError: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">COMMAND_DENIED</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: ‘Command denied’; origin: arm(); params: ()</span></span></code></pre></div><p>This is not a bug! It means that the <code>arm()</code> call was rejected by PX4, with the error code <code>COMMAND_DENIED</code>. It happens for instance when you try to arm before the drone gets a GPS fix. Most functions in MAVSDK-Python can raise exceptions that your code should handle with <code>try... except</code>.</p><p>Now that the drone is flying, we can land:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> drone.action.land()</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>We have been using the apython REPL to run all that interactively, but the same can be achieved by running the <a href="https://github.com/mavlink/MAVSDK-Python/blob/master/examples/takeoff_and_land.py" target="_blank" rel="noreferrer">takeoff_and_land.py</a> example (in which case the <code>aioconsole</code> package is not needed).</p></div><h2 id="using-an-ide" tabindex="-1">Using an IDE <a class="header-anchor" href="#using-an-ide" aria-label="Permalink to &quot;Using an IDE&quot;">​</a></h2><p>Running from the REPL is convenient for testing a few commands interactively, but <code>aioconsole</code> does not provide auto-completion. However, IDEs like PyCharm do. This is very helpful, as typing <code>drone.</code> is enough to get a list of suggestions. The following screenshot shows PyCharm auto-completion for <code>drone.action.</code>:</p><p><img src="`+o+'" alt="Auto-completion in PyCharm"></p><h2 id="examples" tabindex="-1">Examples <a class="header-anchor" href="#examples" aria-label="Permalink to &quot;Examples&quot;">​</a></h2><p>We do have a <a href="https://github.com/mavlink/MAVSDK-Python/tree/master/examples" target="_blank" rel="noreferrer">number of examples</a> available in the repository, which are certainly a good starting point for learning about MAVSDK-Python.</p><h2 id="next-steps" tabindex="-1">Next Steps <a class="header-anchor" href="#next-steps" aria-label="Permalink to &quot;Next Steps&quot;">​</a></h2><p>Once MAVSDK is installed we recommend you:</p><ul><li>Try the <a href="https://github.com/mavlink/MAVSDK-Python/tree/main/examples" target="_blank" rel="noreferrer">other examples</a></li><li>Browse the <a href="http://mavsdk-python-docs.s3-website.eu-central-1.amazonaws.com/" target="_blank" rel="noreferrer">API reference</a> to get an overview of the functionality.</li></ul>',42)]))}const g=a(l,[["render",h]]);export{m as __pageData,g as default};
