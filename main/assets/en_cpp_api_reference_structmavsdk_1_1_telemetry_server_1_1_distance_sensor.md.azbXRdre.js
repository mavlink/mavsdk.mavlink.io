import{_ as s,c as a,al as t,o as i}from"./chunks/framework.BVh3rIuO.js";const k=JSON.parse('{"title":"mavsdk::TelemetryServer::DistanceSensor Struct Reference","description":"","frontmatter":{"github_branch":"main"},"headers":[],"relativePath":"en/cpp/api_reference/structmavsdk_1_1_telemetry_server_1_1_distance_sensor.md","filePath":"en/cpp/api_reference/structmavsdk_1_1_telemetry_server_1_1_distance_sensor.md"}'),r={name:"en/cpp/api_reference/structmavsdk_1_1_telemetry_server_1_1_distance_sensor.md"};function n(_,e,d,c,l,h){return i(),a("div",null,e[0]||(e[0]=[t('<h1 id="mavsdk-telemetryserver-distancesensor-struct-reference" tabindex="-1">mavsdk::TelemetryServer::DistanceSensor Struct Reference <a class="header-anchor" href="#mavsdk-telemetryserver-distancesensor-struct-reference" aria-label="Permalink to &quot;mavsdk::TelemetryServer::DistanceSensor Struct Reference&quot;">​</a></h1><p><code>#include: telemetry_server.h</code></p><hr><p><a href="./structmavsdk_1_1_telemetry_server_1_1_distance_sensor.html">DistanceSensor</a> message type.</p><h2 id="data-fields" tabindex="-1">Data Fields <a class="header-anchor" href="#data-fields" aria-label="Permalink to &quot;Data Fields&quot;">​</a></h2><p>float <a href="#structmavsdk_1_1_telemetry_server_1_1_distance_sensor_1a0f1cf74af825a80e8582444d8daf9db6">minimum_distance_m</a> { float(NAN)} - Minimum distance the sensor can measure, NaN if unknown.</p><p>float <a href="#structmavsdk_1_1_telemetry_server_1_1_distance_sensor_1a143b36be80cd3fc8f39ec783de825c3a">maximum_distance_m</a> { float(NAN)} - Maximum distance the sensor can measure, NaN if unknown.</p><p>float <a href="#structmavsdk_1_1_telemetry_server_1_1_distance_sensor_1ae66872d58d507199e0c99090f9f64015">current_distance_m</a> { float(NAN)} - Current distance reading, NaN if unknown.</p><h2 id="field-documentation" tabindex="-1">Field Documentation <a class="header-anchor" href="#field-documentation" aria-label="Permalink to &quot;Field Documentation&quot;">​</a></h2><h3 id="structmavsdk_1_1_telemetry_server_1_1_distance_sensor_1a0f1cf74af825a80e8582444d8daf9db6" tabindex="-1">minimum_distance_m <a class="header-anchor" href="#structmavsdk_1_1_telemetry_server_1_1_distance_sensor_1a0f1cf74af825a80e8582444d8daf9db6" aria-label="Permalink to &quot;minimum_distance_m {#structmavsdk_1_1_telemetry_server_1_1_distance_sensor_1a0f1cf74af825a80e8582444d8daf9db6}&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">float</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mavsdk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TelemetryServer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DistanceSensor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::minimum_distance_m { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(NAN)}</span></span></code></pre></div><p>Minimum distance the sensor can measure, NaN if unknown.</p><h3 id="structmavsdk_1_1_telemetry_server_1_1_distance_sensor_1a143b36be80cd3fc8f39ec783de825c3a" tabindex="-1">maximum_distance_m <a class="header-anchor" href="#structmavsdk_1_1_telemetry_server_1_1_distance_sensor_1a143b36be80cd3fc8f39ec783de825c3a" aria-label="Permalink to &quot;maximum_distance_m {#structmavsdk_1_1_telemetry_server_1_1_distance_sensor_1a143b36be80cd3fc8f39ec783de825c3a}&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">float</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mavsdk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TelemetryServer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DistanceSensor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::maximum_distance_m { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(NAN)}</span></span></code></pre></div><p>Maximum distance the sensor can measure, NaN if unknown.</p><h3 id="structmavsdk_1_1_telemetry_server_1_1_distance_sensor_1ae66872d58d507199e0c99090f9f64015" tabindex="-1">current_distance_m <a class="header-anchor" href="#structmavsdk_1_1_telemetry_server_1_1_distance_sensor_1ae66872d58d507199e0c99090f9f64015" aria-label="Permalink to &quot;current_distance_m {#structmavsdk_1_1_telemetry_server_1_1_distance_sensor_1ae66872d58d507199e0c99090f9f64015}&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">float</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mavsdk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TelemetryServer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DistanceSensor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::current_distance_m { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(NAN)}</span></span></code></pre></div><p>Current distance reading, NaN if unknown.</p>',18)]))}const m=s(r,[["render",n]]);export{k as __pageData,m as default};
