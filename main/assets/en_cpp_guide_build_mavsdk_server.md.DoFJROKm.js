import{_ as a,c as e,al as i,o as n}from"./chunks/framework.BVh3rIuO.js";const u=JSON.parse('{"title":"Build mavsdk_server from Source","description":"","frontmatter":{"github_branch":"main"},"headers":[],"relativePath":"en/cpp/guide/build_mavsdk_server.md","filePath":"en/cpp/guide/build_mavsdk_server.md"}'),l={name:"en/cpp/guide/build_mavsdk_server.md"};function o(t,s,r,d,c,p){return n(),e("div",null,s[0]||(s[0]=[i(`<h1 id="build-mavsdk-server-from-source" tabindex="-1">Build mavsdk_server from Source <a class="header-anchor" href="#build-mavsdk-server-from-source" aria-label="Permalink to &quot;Build mavsdk_server from Source&quot;">​</a></h1><p>Language wrappers for MAVSDK other than C++ connect to the MAVSDK C++ core using gRPC. This gRPC server around the MAVSDK C++ library is called mavsdk_server (in the past it was referred to as the backend).</p><p>For more information about the architecture, also see <a href="./../contributing/autogen.html">how the auto-generation works</a>.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>It is generally recommended to use pre-built binaries of mavsdk_server from the <a href="https://github.com/mavlink/MAVSDK/releases" target="_blank" rel="noreferrer">releases page</a>, however, if needed, it can also be built manually from source as described below.</p></div><h2 id="requirements" tabindex="-1">Requirements <a class="header-anchor" href="#requirements" aria-label="Permalink to &quot;Requirements&quot;">​</a></h2><p>The requirements are the same as described in the <a href="./build.html#requirements">library build instructions</a></p><h2 id="build-on-linux" tabindex="-1">Build on Linux <a class="header-anchor" href="#build-on-linux" aria-label="Permalink to &quot;Build on Linux&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF -DBUILD_MAVSDK_SERVER=ON -Bbuild/default -H.</span></span>
<span class="line"><span>cmake --build build/default -j8</span></span></code></pre></div><h2 id="build-on-macos" tabindex="-1">Build on macOS <a class="header-anchor" href="#build-on-macos" aria-label="Permalink to &quot;Build on macOS&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF -DBUILD_MAVSDK_SERVER=ON -Bbuild/default -H.</span></span>
<span class="line"><span>cmake --build build/default -j8</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>There is no proper support for the Apple M1 chip yet. One blocker is that there is currently no M1 hardware in GitHub Actions CI available.</p></div><h2 id="build-on-windows" tabindex="-1">Build on Windows <a class="header-anchor" href="#build-on-windows" aria-label="Permalink to &quot;Build on Windows&quot;">​</a></h2><p>Open the &quot;x64 Native Tools Command Prompt for VS 2022&quot;, cd into the MAVSDK directory, and do:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_MAVSDK_SERVER=ON -Bbuild/default -H.</span></span>
<span class="line"><span>cmake --build build/default -j8</span></span></code></pre></div><h2 id="build_cpp_android" tabindex="-1">Build for Android <a class="header-anchor" href="#build_cpp_android" aria-label="Permalink to &quot;Build for Android {#build_cpp_android}&quot;">​</a></h2><p>Build for Android using the dockcross cross compiler, as described in the <a href="#cross_compilation_dockcross">cross-compilation</a> section below (e.g. with the <code>dockcross/android-arm64</code> image).</p><h2 id="build_cpp_iOS" tabindex="-1">Build for iOS <a class="header-anchor" href="#build_cpp_iOS" aria-label="Permalink to &quot;Build for iOS {#build_cpp_iOS}&quot;">​</a></h2><p>To build for real iOS devices on macOS:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cmake</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -DCMAKE_BUILD_TYPE=Release</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -DBUILD_MAVSDK_SERVER=ON</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -DBUILD_SHARED_LIBS=OFF</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -DCMAKE_TOOLCHAIN_FILE=tools/ios.toolchain.cmake</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -DPLATFORM=OS</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -Bbuild/ios</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -H.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cmake</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --build</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build/ios</span></span></code></pre></div><p>Build for the iOS simulator on macOS:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cmake</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -DCMAKE_BUILD_TYPE=Release</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -DBUILD_MAVSDK_SERVER=ON</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -DBUILD_SHARED_LIBS=OFF</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -DCMAKE_TOOLCHAIN_FILE=tools/ios.toolchain.cmake</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -DPLATFORM=SIMULATOR64</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -Bbuild/ios_simulator</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -H.</span></span></code></pre></div><h2 id="cross_compilation_dockcross" tabindex="-1">Cross compilation using dockcross <a class="header-anchor" href="#cross_compilation_dockcross" aria-label="Permalink to &quot;Cross compilation using dockcross {#cross_compilation_dockcross}&quot;">​</a></h2><p>Cross compilation is usually the fastest way to compile for &quot;embedded&quot; platforms like the Raspberry Pi, BeagleBone Blue or Nvidia Jetson (i.e. typically faster than native compilation on device itself).</p><p>We recommend using <a href="https://github.com/dockcross/dockcross" target="_blank" rel="noreferrer">dockcross</a>, which is a very convenient tool for cross compilation based on docker (and which supports many platforms).</p><p>For example, use the commands below to build for <code>armv7</code>:</p><ol><li>Make sure docker is installed on your system.</li><li>Navigate into the SDK directory, and use the commands below:<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>cd MAVSDK</span></span>
<span class="line"><span>docker run --rm dockcross/linux-armv7 &gt; ./dockcross-linux-armv7</span></span>
<span class="line"><span>chmod +x ./dockcross-linux-armv7</span></span>
<span class="line"><span>./dockcross-linux-armv7 cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_MAVSDK_SERVER=ON -DBUILD_SHARED_LIBS=OFF -Bbuild/linux-armv7 -S.</span></span>
<span class="line"><span>./dockcross-linux-armv7 cmake --build build/linux-armv7 -j 8</span></span></code></pre></div></li><li>If all goes well, <code>mavsdk_server</code> is built. You can check the file with:<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>./dockcross-linux-armv7 file build/linux-armv7-release/src/backend/src/mavsdk_server</span></span>
<span class="line"><span>build/linux-armv7-release/src/backend/src/mavsdk_server: ELF 32-bit LSB executable, ARM, EABI5 version 1 (GNU/Linux), dynamically linked, interpreter /lib/ld-linux-armhf.so.3, for GNU/Linux 4.10.8, not stripped</span></span></code></pre></div></li><li>The newly built binary can now be copied to the device:<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>cp build/linux-armv7/src/backend/src/mavsdk_server somewhere/else</span></span></code></pre></div></li></ol>`,26)]))}const k=a(l,[["render",o]]);export{u as __pageData,k as default};
