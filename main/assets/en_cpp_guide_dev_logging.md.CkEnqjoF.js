import{_ as t,c as s,al as i,o as a}from"./chunks/framework.BVh3rIuO.js";const p=JSON.parse('{"title":"Plugin/Test Logging","description":"","frontmatter":{"github_branch":"main"},"headers":[],"relativePath":"en/cpp/guide/dev_logging.md","filePath":"en/cpp/guide/dev_logging.md"}'),o={name:"en/cpp/guide/dev_logging.md"};function n(r,e,d,l,g,c){return a(),s("div",null,e[0]||(e[0]=[i(`<h1 id="plugin-test-logging" tabindex="-1">Plugin/Test Logging <a class="header-anchor" href="#plugin-test-logging" aria-label="Permalink to &quot;Plugin/Test Logging&quot;">​</a></h1><p>The MAVSDK provides an API that developers can use for console logging in plugins and integration tests. Basic <a href="#message_logging">message logging</a> can be enabled by building with a specific <code>#define</code>.</p><h2 id="plugin-log-api" tabindex="-1">Plugin Log API <a class="header-anchor" href="#plugin-log-api" aria-label="Permalink to &quot;Plugin Log API&quot;">​</a></h2><p>The API methods display a custom message, prepending a timestamp and the type of log message (e.g. debug) and appending the origin of the message (file and line number).</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>The API should be considered &quot;internal&quot;. It is not exported, or intended, for use in SDK apps (and we do not commit to maintaining compatibility in future versions).</p></div><h3 id="usage" tabindex="-1">Usage <a class="header-anchor" href="#usage" aria-label="Permalink to &quot;Usage&quot;">​</a></h3><p>The API is defined in <a href="https://github.com/mavlink/MAVSDK/blob/main/src/core/log.h" target="_blank" rel="noreferrer">src/core/log.h</a> (and made available to integration tests via <a href="https://github.com/mavlink/MAVSDK/blob/main/src/integration_tests/integration_test_helper.h" target="_blank" rel="noreferrer">/src/integration_tests/integration_test_helper.h</a>).</p><p>The API methods are called as shown below for <code>LogDebug()</code>, with the insertion operator (<code>&lt;&lt;</code>) used to append the message-specific text.</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;../path-to/core/log.h&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">LogDebug</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;command unsupported (&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> something.mavlink_command </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;).&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h3 id="log-methods" tabindex="-1">Log Methods <a class="header-anchor" href="#log-methods" aria-label="Permalink to &quot;Log Methods&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Function</th><th>Description</th><th>Example</th></tr></thead><tbody><tr><td><code>LogDebug()</code></td><td>Debug messages.<br> For reporting internal progress/state.<br><em>Not displayed in RELEASE builds.</em></td><td><code style="color:green;">[04:55:08|Error]</code> <code>This is a debug message (test_file.cpp:26)</code></td></tr><tr><td><code>LogInfo()</code></td><td>Information messages.<br>For reporting progress and status.</td><td><code style="color:#006fb8;">[04:55:08|Error]</code> <code>This is an information message (test_file.cpp:26)</code></td></tr><tr><td><code>LogWarn()</code></td><td>Warning messages.<br>For reporting when vehicle not acting as commanded (e.g. rejecting commands).</td><td><code style="color:#ffc706;">[04:55:08|Error]</code> <code>This is a warning message (test_file.cpp:26)</code></td></tr><tr><td><code>LogErr()</code></td><td>Error messages.<br>For reporting errors in SDK behaviour (e.g. communication link issues/retry failures).</td><td><code style="color:red;">[04:55:08|Error]</code> <code>This is an error message (test_file.cpp:26)</code></td></tr></tbody></table><h2 id="message_logging" tabindex="-1">Message Logging <a class="header-anchor" href="#message_logging" aria-label="Permalink to &quot;Message Logging {#message_logging}&quot;">​</a></h2><p>Basic logging is defined in source for both incoming (handled/ignored) and sent MAVLink messages.</p><p>This functionality is disabled by default, and available only in debug build when built from source. To enable the logs, set <code>#define MESSAGE_DEBUGGING 1</code> in <a href="https://github.com/mavlink/MAVSDK/blob/main/src/core/system.cpp" target="_blank" rel="noreferrer">src/core/system.cpp</a></p>`,14)]))}const u=t(o,[["render",n]]);export{p as __pageData,u as default};
