import{_ as t,c as a,al as n,o as i}from"./chunks/framework.BVh3rIuO.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{"github_branch":"main"},"headers":[],"relativePath":"en/cpp/contributing/faq.md","filePath":"en/cpp/contributing/faq.md"}'),o={name:"en/cpp/contributing/faq.md"};function r(s,e,h,l,d,c){return i(),a("div",null,e[0]||(e[0]=[n('<h2 id="faq" tabindex="-1">FAQ <a class="header-anchor" href="#faq" aria-label="Permalink to &quot;FAQ&quot;">​</a></h2><h3 id="why-was-the-sdk-written-in-c" tabindex="-1">Why was the SDK written in C++ <a class="header-anchor" href="#why-was-the-sdk-written-in-c" aria-label="Permalink to &quot;Why was the SDK written in C++&quot;">​</a></h3><p>The aim was to have an API in a language which is cross-platform and has many language bindings. Additionally, the library needs to be lightweight and fast, so it does not fall over for onboard usage with high rate messaging.</p><h3 id="does-the-sdk-support-multiple-vehicles" tabindex="-1">Does the SDK support multiple vehicles? <a class="header-anchor" href="#does-the-sdk-support-multiple-vehicles" aria-label="Permalink to &quot;Does the SDK support multiple vehicles?&quot;">​</a></h3><p>The SDK is designed to support multiple vehicles (&quot;systems&quot;) but at time of writing there are no tests for this.</p><p>A system needs to have a specific MAVLink system ID, and can consist of multiple components with different component IDs. An example would be a drone with a gimbal and a camera talking MAVLink with the same system ID but different component IDs.</p><p>The limit is in theory 255 vehicles, with system IDs ranging from 1 to 255.</p><h3 id="are-serial-connections-supported" tabindex="-1">Are serial connections supported? <a class="header-anchor" href="#are-serial-connections-supported" aria-label="Permalink to &quot;Are serial connections supported?&quot;">​</a></h3><p>The architecture supports serial, TCP, and UDP connections.</p><h3 id="why-is-libcurl-a-dependency" tabindex="-1">Why is libCURL a dependency? <a class="header-anchor" href="#why-is-libcurl-a-dependency" aria-label="Permalink to &quot;Why is libCURL a dependency?&quot;">​</a></h3><p><em>libCURL</em> will be required to download the camera definition file which is referenced in <a href="https://mavlink.io/en/messages/common.html#CAMERA_INFORMATION" target="_blank" rel="noreferrer">CAMERA_INFORMATION</a>. It might also come in handy whenever any other REST resources are required.</p><h3 id="how-are-plugins-added" tabindex="-1">How are plugins added? <a class="header-anchor" href="#how-are-plugins-added" aria-label="Permalink to &quot;How are plugins added?&quot;">​</a></h3><p>Plugins need to have the correct structure and be placed in the <a href="./../plugins.html">plugins directory</a>. It is also possible to add external plugins which are outside of the SDK source tree. For instructions see the <a href="./build.html#build-with-external-directory-for-plugins-and-custom-integration_tests">build docs</a>.</p><h3 id="can-a-plugin-depend-on-another-one" tabindex="-1">Can a plugin depend on another one? <a class="header-anchor" href="#can-a-plugin-depend-on-another-one" aria-label="Permalink to &quot;Can a plugin depend on another one?&quot;">​</a></h3><p>Yes it can but it should not! The idea is that plugins don&#39;t have any coupling between each other, which allows for any plugin to be changed or removed without breaking the rest. This will lead to some duplication at places, that&#39;s an acceptable trade-off. If the same code is used in many places, it can always be moved to core and get re-used from there.</p><h3 id="what-is-the-difference-between-unit-and-integration-test" tabindex="-1">What is the difference between unit and integration test? <a class="header-anchor" href="#what-is-the-difference-between-unit-and-integration-test" aria-label="Permalink to &quot;What is the difference between unit and integration test?&quot;">​</a></h3><p>The unit tests are only concerned with one plugin or less. The integration tests however might need PX4 SITL running and combine multiple plugins.</p>',17)]))}const m=t(o,[["render",r]]);export{u as __pageData,m as default};
