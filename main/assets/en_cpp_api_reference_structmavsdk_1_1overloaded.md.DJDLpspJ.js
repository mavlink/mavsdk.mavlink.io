import{_ as t,c as r,j as e,a as l,o}from"./chunks/framework.BVh3rIuO.js";const f=JSON.parse('{"title":"mavsdk::overloaded Struct Reference","description":"","frontmatter":{"github_branch":"main"},"headers":[],"relativePath":"en/cpp/api_reference/structmavsdk_1_1overloaded.md","filePath":"en/cpp/api_reference/structmavsdk_1_1overloaded.md"}'),n={name:"en/cpp/api_reference/structmavsdk_1_1overloaded.md"};function d(c,a,s,p,u,i){return o(),r("div",null,a[0]||(a[0]=[e("h1",{id:"mavsdk-overloaded-struct-reference",tabindex:"-1"},[l("mavsdk::overloaded Struct Reference "),e("a",{class:"header-anchor",href:"#mavsdk-overloaded-struct-reference","aria-label":'Permalink to "mavsdk::overloaded Struct Reference"'},"â€‹")],-1),e("p",null,[e("code",null,"#include: plugin_base.h")],-1),e("hr",null,null,-1),e("p",null,"Creates an overloaded callable object from multiple other callables.",-1),e("p",null,"This template class allows to combine multiple callable objects into one overloaded callable object, that can handle different types of parameters. For example:",-1),e("p",null,'overloaded { [](auto value) { LogErr() << "Got an unexpected type"; }, [](uint32_t value) { LogDebug() << "Got an expected type"; } }((uint32_t) 100);',-1),e("p",null,"This is especially useful for creating callback functions to handle different parameter types",-1)]))}const v=t(n,[["render",d]]);export{f as __pageData,v as default};
