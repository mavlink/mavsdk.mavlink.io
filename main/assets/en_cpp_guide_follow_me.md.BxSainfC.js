import{_ as i,c as a,al as e,o as t}from"./chunks/framework.BVh3rIuO.js";const c=JSON.parse('{"title":"Follow Me","description":"","frontmatter":{"github_branch":"main"},"headers":[],"relativePath":"en/cpp/guide/follow_me.md","filePath":"en/cpp/guide/follow_me.md"}'),l={name:"en/cpp/guide/follow_me.md"};function n(h,s,o,p,r,k){return t(),a("div",null,s[0]||(s[0]=[e(`<h1 id="follow-me" tabindex="-1">Follow Me <a class="header-anchor" href="#follow-me" aria-label="Permalink to &quot;Follow Me&quot;">​</a></h1><p>The <a href="./../api_reference/classmavsdk_1_1_follow_me.html">Follow Me</a> class is used to engage the PX4 <a href="https://docs.px4.io/master/en/flight_modes/follow_me.html" target="_blank" rel="noreferrer">Follow Me Mode</a> (multicopter only). In this mode a copter will automatically yaw to face and follow a user at a specified position and distance.</p><p>The API is used to supply the position(s) for the <a href="./../api_reference/structmavsdk_1_1_follow_me_1_1_target_location.html">target</a> and the relative <a href="./../api_reference/structmavsdk_1_1_follow_me_1_1_config.html">follow position</a> of the vehicle. Applications must get target position information from the underlying platform (or some other source). The location APIs for supported platforms are listed below:</p><ul><li>Android: <a href="https://developer.android.com/reference/android/location/Location.html" target="_blank" rel="noreferrer">Location</a></li><li>Apple: <a href="https://developer.apple.com/documentation/corelocation" target="_blank" rel="noreferrer">Core Location Framework</a></li><li>Windows: <a href="https://docs.microsoft.com/en-us/uwp/api/Windows.Devices.Geolocation" target="_blank" rel="noreferrer">Windows.Devices.Geolocation</a></li></ul><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Running <em>QGroundControl</em> at the same time as the SDK <em>Follow Me</em> may result in unpredictable behaviour as both send position updates. You <strong>must</strong> ensure that <em>GSC Position Streaming</em> is disabled. Use the latest <em>QGC Daily Build</em> and ensure that the <strong><a href="https://docs.qgroundcontrol.com/en/SettingsView/General.html" target="_blank" rel="noreferrer">Application Setting &gt; General</a> &gt; Miscellaneous &gt; Stream GCS Position</strong> is set to <em>Never</em>.</p></div><h2 id="create-the-plugin" tabindex="-1">Create the Plugin <a class="header-anchor" href="#create-the-plugin" aria-label="Permalink to &quot;Create the Plugin&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>FollowMe</code> objects are created in the same way as other SDK plugins. General instructions are provided in the topic: <a href="./../guide/using_plugins.html">Using Plugins</a>.</p></div><p>The main steps are:</p><ol><li><a href="./../guide/connections.html">Create a connection</a> to a <code>system</code>. For example (basic code without error checking):<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>#include &lt;mavsdk/mavsdk.h&gt;</span></span>
<span class="line"><span>Mavsdk mavsdk{Mavsdk::Configuration{Mavsdk::ComponentType::GroundStation}};</span></span>
<span class="line"><span>ConnectionResult conn_result = mavsdk.add_udp_connection();</span></span>
<span class="line"><span>// Wait for the system to connect via heartbeat</span></span>
<span class="line"><span>while (mavsdk.system().size() == 0) {</span></span>
<span class="line"><span>   sleep_for(seconds(1));</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>// System got discovered.</span></span>
<span class="line"><span>System system = mavsdk.systems()[0];</span></span></code></pre></div></li><li>Create an instance of <code>FollowMe</code> with the <code>system</code>:<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>#include &lt;mavsdk/plugins/follow_me/follow_me.h&gt;</span></span>
<span class="line"><span>auto follow_me = FollowMe{system};</span></span></code></pre></div></li></ol><p>The <code>follow_me</code> object can then used to access the plugin API (as shown in the following sections).</p><h2 id="set-the-follow-configuration" tabindex="-1">Set the Follow Configuration <a class="header-anchor" href="#set-the-follow-configuration" aria-label="Permalink to &quot;Set the Follow Configuration&quot;">​</a></h2><p>By default the vehicle will follow directly behind the target at a height and distance of 8 metres. You can (optionally) call <a href="./../api_reference/classmavsdk_1_1_follow_me.html#classmavsdk_1_1_follow_me_1aa76aab9a21bc3ae475bee6a55c0e4d30">set_config()</a> at any time to specify a different height, follow distance, relative position (front left/right/centre or behind) and responsiveness to target movements.</p><p>The code fragment below shows how to set the configuration:</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// configure follow me behaviour</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FollowMe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::Config config;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">config.min_height_m </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 12.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Minimum height</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">config.follow_distance_m </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 20.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Follow distance</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">config.responsiveness </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Higher responsiveness</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">config.follow_direction </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FollowMe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FollowDirection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::FRONT;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //Follow from front-centre</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Apply configuration</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FollowMe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::Result config_result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> follow_me.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set_config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(config);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (config_result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FollowMe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::Success) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // handle config-setting failure (in this case print error)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Setting configuration failed:&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> config_result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>The <a href="./../api_reference/classmavsdk_1_1_follow_me.html#classmavsdk_1_1_follow_me_1aca2e599cd6fb889b9f80dc7a9da57ee9">get_config()</a> method is provided to get the current configuration:</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">auto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> curr_config </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> follow_me.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get_config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><h2 id="following-a-target" tabindex="-1">Following a Target <a class="header-anchor" href="#following-a-target" aria-label="Permalink to &quot;Following a Target&quot;">​</a></h2><p>To start and stop following a target, call <a href="./../api_reference/classmavsdk_1_1_follow_me.html#classmavsdk_1_1_follow_me_1a4b6ae3ec1ff07d8b3a79038e04992003">start()</a> and <a href="./../api_reference/classmavsdk_1_1_follow_me.html#classmavsdk_1_1_follow_me_1a202a7b9edf56d9b883c974a09c14ba7d">stop()</a>, respectively - <code>start()</code> puts the vehicle into <a href="https://docs.px4.io/master/en/flight_modes/follow_me.html" target="_blank" rel="noreferrer">Follow-Me mode</a> and <code>stop()</code> puts it into <a href="https://docs.px4.io/master/en/flight_modes/hold.html" target="_blank" rel="noreferrer">Hold mode</a>.</p><p>Use <a href="./../api_reference/classmavsdk_1_1_follow_me.html#classmavsdk_1_1_follow_me_1a1a99e282472235f726bfde430873ffd5">set_target_location()</a> to set the target position(s) for the vehicle to follow (the app typically passes its host&#39;s current position, which it would obtain using OS-specific methods). This can be called at any time, but messages will only be sent once following is started. The plugin automatically resends the last set position at the rate required by the autopilot/flight mode (1 Hz).</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Typically you would call <code>set_target_location()</code> before or shortly after starting the mode. If you call <code>start()</code> without having set any target location, or if the connection is broken, the vehicle will climb to minimum altitude (if needed) and remain in the mode waiting for messages.</p></div><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Start following</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FollowMe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::Result follow_me_result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> follow_me.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (follow_me_result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FollowMe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::Success) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // handle start failure (in this case print error)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Failed to start following:&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> follow_me_result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Get target position from underlying platform and supply to vehicle.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   For this example we just show one point being set (instead of a stream).</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">follow_me.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set_target_location</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">47.39776569</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8.54553292</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Stop following</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">follow_me_result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> follow_me.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (follow_me_result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FollowMe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::Success) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // handle stop failure (in this case print error)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Failed to stop following:&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> follow_me_result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>The last location that was set can be retrieved using <a href="./../api_reference/classmavsdk_1_1_follow_me.html#classmavsdk_1_1_follow_me_1af2a1af346ee2fa7761b58b406e9e6e0c">get_last_location()</a>. Before a target position is first set this API will return <code>Nan</code>.</p><h2 id="further-information" tabindex="-1">Further Information <a class="header-anchor" href="#further-information" aria-label="Permalink to &quot;Further Information&quot;">​</a></h2><p>Additional information/examples for the Follow Me API are linked below:</p><ul><li><a href="./../examples/follow_me.html">Example:Follow Me Mode</a></li><li>Integration tests: <ul><li><a href="https://github.com/mavlink/MAVSDK/blob/main/src/integration_tests/follow_me.cpp" target="_blank" rel="noreferrer">follow_me.cpp</a></li></ul></li></ul>`,25)]))}const g=i(l,[["render",n]]);export{c as __pageData,g as default};
