import{_ as e,c as a,al as s,o as t}from"./chunks/framework.BVh3rIuO.js";const u=JSON.parse('{"title":"Building MAVSDK Library from Source","description":"","frontmatter":{"github_branch":"main"},"headers":[],"relativePath":"en/cpp/guide/build.md","filePath":"en/cpp/guide/build.md"}'),l={name:"en/cpp/guide/build.md"};function n(o,i,d,h,r,p){return t(),a("div",null,i[0]||(i[0]=[s(`<h1 id="building-mavsdk-library-from-source" tabindex="-1">Building MAVSDK Library from Source <a class="header-anchor" href="#building-mavsdk-library-from-source" aria-label="Permalink to &quot;Building MAVSDK Library from Source&quot;">​</a></h1><p>This section explains how to build and install the MAVSDK C++ library from source for all our target platforms.</p><p>Note that there are separate instructions to <a href="./build_mavsdk_server.html">build the mavsdk_server</a>.</p><h2 id="build_mavsdk_cpp_library" tabindex="-1">Build the C++ Library <a class="header-anchor" href="#build_mavsdk_cpp_library" aria-label="Permalink to &quot;Build the C++ Library {#build_mavsdk_cpp_library}&quot;">​</a></h2><p>This section explains how to build the library along with its unit and integration tests.</p><h3 id="requirements" tabindex="-1">Requirements <a class="header-anchor" href="#requirements" aria-label="Permalink to &quot;Requirements {#requirements}&quot;">​</a></h3><p>The build requirements are git, cmake, and a compiler such as GCC, Clang, or MSVC.</p><h4 id="linux" tabindex="-1">Linux <a class="header-anchor" href="#linux" aria-label="Permalink to &quot;Linux&quot;">​</a></h4><p><strong>Ubuntu</strong>:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt-get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt-get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build-essential</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cmake</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span></span></code></pre></div><p><strong>Fedora</strong>:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dnf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dnf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> groupinstall</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Development Tools&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Development Libraries&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dnf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cmake</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span></span></code></pre></div><p><strong>Arch Linux</strong>:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pacman</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -Sy</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> base-devel</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cmake</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span></span></code></pre></div><h4 id="macos" tabindex="-1">macOS <a class="header-anchor" href="#macos" aria-label="Permalink to &quot;macOS&quot;">​</a></h4><p>First install XCode Command line tools:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>xcode-select --install</span></span></code></pre></div><p>And <a href="https://brew.sh/" target="_blank" rel="noreferrer">Homebrew</a> (for cmake). Once you have installed brew, you can install <code>cmake</code> using <code>brew</code> in the terminal:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>brew install cmake</span></span></code></pre></div><h4 id="windows" tabindex="-1">Windows <a class="header-anchor" href="#windows" aria-label="Permalink to &quot;Windows&quot;">​</a></h4><p>To build the library in Windows, you need:</p><ul><li><a href="https://www.visualstudio.com/downloads/" target="_blank" rel="noreferrer">Build Tools for Visual Studio 2022</a>: Download and install (only the &quot;Visual C+ Build Tools&quot; are needed from installer).</li><li><a href="https://cmake.org/download/" target="_blank" rel="noreferrer">cmake</a>: Download the installer and run it. Make sure to tick &quot;add to PATH&quot; during the installation.</li><li><a href="https://git-scm.com/download/win" target="_blank" rel="noreferrer">git</a> or any other tool to work with git.</li></ul><blockquote><p>Note: Building using Cygwin or MingW is not supported.</p></blockquote><h3 id="getting-the-source" tabindex="-1">Getting the source <a class="header-anchor" href="#getting-the-source" aria-label="Permalink to &quot;Getting the source&quot;">​</a></h3><p>Download the source using git:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/mavlink/MAVSDK.git</span></span></code></pre></div><p>Make sure to get all the submodules as well:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git submodule update --init --recursive</span></span></code></pre></div><h3 id="building-fundamentals" tabindex="-1">Building Fundamentals <a class="header-anchor" href="#building-fundamentals" aria-label="Permalink to &quot;Building Fundamentals&quot;">​</a></h3><p>Building the MAVSDK with CMake is broken down into two steps: <strong>Configuration</strong> and <strong>Build</strong>.</p><h4 id="configuration_step" tabindex="-1">Build Configuration Step <a class="header-anchor" href="#configuration_step" aria-label="Permalink to &quot;Build Configuration Step {#configuration_step}&quot;">​</a></h4><p>For configuration, you specify the type of build you want to execute in the <a href="#build_step">build step</a>. You can checkout the <a href="https://cmake.org/cmake/help/latest/manual/cmake-buildsystem.7.html#build-configurations" target="_blank" rel="noreferrer">CMake Documentation on Build Configuration</a> for more context.</p><p>A typical configuration command example would be:</p><p><code>cmake -DCMAKE_BUILD_TYPE=Debug -Bbuild/default -S.</code></p><ul><li>Build type is set to <code>Debug</code></li><li>Build directory is set to <code>build/default</code></li><li>Chose the directory using the <code>H.</code> flag</li></ul><p>During the configure step you can set more flags using <code>-DFLAG=Value</code>:</p><ul><li><code>CMAKE_BUILD_TYPE</code>: as documented above, to chose between <code>Debug</code> and <code>Release</code> build.</li><li><code>CMAKE_INSTALL_PREFIX</code>: as documented above, to specify directory to install library artifacts.</li><li><code>BUILD_SHARED_LIBS</code>: set to <code>ON</code> to build dynamic libraries (such as .so on Linux, .dylib on macOS, .dll on Windows). Set to <code>OFF</code> to build static libraries (such as .a on Linux and macOS, .lib on Windows).</li><li><code>SUPERBUILD</code>: set to <code>OFF</code> to use system dependencies instead of <a href="https://github.com/mavlink/MAVSDK/tree/main/third_party" target="_blank" rel="noreferrer">third party dependencies</a> downloaded and built using cmake.</li><li><code>CMAKE_PREFIX_PATH</code>: can be used to set the path where the dependencies can be found if <code>SUPERBUILD</code> is set to <code>OFF</code>.</li><li><code>BUILD_MAVSDK_SERVER</code>: set to <code>ON</code> to build mavsdk_server, see instruction to <a href="./build_mavsdk_server.html">build mavsdk_server</a>.</li><li><code>ASAN</code>: set to <code>ON</code> to enable address sanitizer.</li><li><code>UBSAN</code>: set to <code>ON</code> to enable undefined behavior sanitizer.</li><li><code>LSAN</code>: set to <code>ON</code> to enable leak sanitizer.</li><li><code>WERROR</code>: set to <code>ON</code> to error on warnings, mostly used for CI.</li></ul><p>After the configuration step, everything that will be build in the <a href="#build_step">build step</a> have been specified, and if you want to change your build configuration (e.g. If you want to build <code>Debug</code> build instead of <code>Release</code> build), you must execute the <a href="#configuration_step">configuration step</a> again!</p><h4 id="build_step" tabindex="-1">Build Step <a class="header-anchor" href="#build_step" aria-label="Permalink to &quot;Build Step {#build_step}&quot;">​</a></h4><p>In the build step, we finally build the library and binaries and link them.</p><p>The stripped down version of the build command would be:</p><p><code>cmake --build build/default</code></p><ul><li>The <code>--build</code> signals the CMake to execute the build</li><li>It uses the build configuration built from the <a href="#configuration_step">configuration step</a>, located at <code>build/default</code> folder</li></ul><p>Additionally, you can install it in the system with the <code>--target install</code> command added as well, which is explained in detail in the <a href="#install_mavsdk_cpp_library">Installing the C++ Library</a> section below.</p><h3 id="building" tabindex="-1">Building <a class="header-anchor" href="#building" aria-label="Permalink to &quot;Building&quot;">​</a></h3><h4 id="debug" tabindex="-1">Debug <a class="header-anchor" href="#debug" aria-label="Permalink to &quot;Debug&quot;">​</a></h4><p>To build the MAVSDK C++ Library for development, use the debug build.</p><p>There are 2 steps in building a library: Configure and build.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cmake</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -DCMAKE_BUILD_TYPE=Debug</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -Bbuild/default</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -S.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cmake</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --build</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build/default</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -j8</span></span></code></pre></div><h4 id="release" tabindex="-1">Release <a class="header-anchor" href="#release" aria-label="Permalink to &quot;Release&quot;">​</a></h4><p>Once you ship software, make sure to use the release build with optimizations turned on:</p><p><strong>Linux/macOS:</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cmake</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -Bbuild/default</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -DCMAKE_BUILD_TYPE=Release</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -S.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cmake</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --build</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build/default</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -j8</span></span></code></pre></div><p><strong>Windows:</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cmake</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -Bbuild/default</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -S.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -DCMAKE_BUILD_TYPE=Release</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cmake</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --build</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build/default</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -j8</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Release</span></span></code></pre></div><blockquote><p>Note: It is not usual to use CMAKE_BUILD_TYPE on Windows (with MSVC), however, our build requires it for the dependencies which are built at configure time.</p></blockquote><h2 id="install_mavsdk_cpp_library" tabindex="-1">Installing the C++ Library <a class="header-anchor" href="#install_mavsdk_cpp_library" aria-label="Permalink to &quot;Installing the C++ Library {#install_mavsdk_cpp_library}&quot;">​</a></h2><p><em>Installing</em> builds the SDK <strong>and</strong> copies the libraries and header files into a &quot;public&quot; location so that they can be referenced by C++ applications (see <a href="./../guide/toolchain.html">Building C++ Apps</a>).</p><h3 id="sdk_system_wide_install" tabindex="-1">System-wide Install <a class="header-anchor" href="#sdk_system_wide_install" aria-label="Permalink to &quot;System-wide Install {#sdk_system_wide_install}&quot;">​</a></h3><p>You can configure to install system wide by not setting the <code>CMAKE_INSTALL_PREFIX</code> in the <a href="#configuration_step">configuration step</a>, since CMake tries to install system wide by default. For Linux/macOS that&#39;s <code>/usr/local</code>, for Windows it is somewhere in <code>C:\\Program Files</code>.</p><p>To install system-wide the command needs to be run with sudo on Linux/macOS:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cmake</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --build</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build/default</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --target</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span></span></code></pre></div><p>or run in a command prompt with admin privileges on Windows, or using <code>runas</code>:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">runas</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cmake</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --build</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build/default</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --target</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Make sure to prevent conflicts between libraries installed in your system. The mavsdk library installed via a .deb or .rpm file will be installed in <code>/usr/</code> while the built library will be installed in <code>/usr/local</code>. It&#39;s recommended to only have one installed at any time to prevent conflicts.</p></div><h3 id="sdk_local_install" tabindex="-1">Local Install <a class="header-anchor" href="#sdk_local_install" aria-label="Permalink to &quot;Local Install {#sdk_local_install}&quot;">​</a></h3><p>The install path can be set in the <a href="#configuration_step">configuration step</a> using <code>CMAKE_INSTALL_PREFIX</code>:</p><p>For example, to install into the <code>MAVSDK/install/</code> folder you would set the <code>CMAKE_INSTALL_PREFIX</code> variable to specify a path relative to the folder from which you call <code>cmake</code> (or an absolute path).</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cmake</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -DCMAKE_BUILD_TYPE=Release</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -DCMAKE_INSTALL_PREFIX=install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -Bbuild/default</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -S.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cmake</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --build</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build/default</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --target</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>If you already have run <em>cmake</em> without setting <code>CMAKE_INSTALL_PREFIX</code>, you may need to clean the build first:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -rf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build/default</span></span></code></pre></div></div><h2 id="troubleshooting" tabindex="-1">Troubleshooting <a class="header-anchor" href="#troubleshooting" aria-label="Permalink to &quot;Troubleshooting&quot;">​</a></h2><h3 id="git-submodules-out-of-date" tabindex="-1">Git submodules out of date <a class="header-anchor" href="#git-submodules-out-of-date" aria-label="Permalink to &quot;Git submodules out of date&quot;">​</a></h3><p>Some common build issues can be resolved by updating submodules and cleaning the distribution:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>cd MAVSDK</span></span>
<span class="line"><span>git submodule update --recursive</span></span>
<span class="line"><span>rm -rf build</span></span></code></pre></div><p>Then attempt to build again.</p><h3 id="msvc-vs-mingw" tabindex="-1">MSVC vs. MingW <a class="header-anchor" href="#msvc-vs-mingw" aria-label="Permalink to &quot;MSVC vs. MingW&quot;">​</a></h3><p>We only try to support building using MSVC, MingW is not working, mostly because the defines/flags for it are missing.</p><h3 id="undefined-reference-to-mavsdk" tabindex="-1">Undefined reference to mavsdk... <a class="header-anchor" href="#undefined-reference-to-mavsdk" aria-label="Permalink to &quot;Undefined reference to mavsdk...&quot;">​</a></h3><p>If you only just built the library and installed it system-wide may also need to <a href="http://tldp.org/HOWTO/Program-Library-HOWTO/shared-libraries.html" target="_blank" rel="noreferrer">update the linker cache</a>.</p><p>On Linux this is done with <code>sudo ldconfig</code>.</p>`,80)]))}const k=e(l,[["render",n]]);export{u as __pageData,k as default};
