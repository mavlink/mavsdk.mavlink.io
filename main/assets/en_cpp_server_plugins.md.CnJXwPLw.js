import{_ as a,c as r,al as s,o as i}from"./chunks/framework.BVh3rIuO.js";const h=JSON.parse('{"title":"Server Plugins","description":"","frontmatter":{"github_branch":"main"},"headers":[],"relativePath":"en/cpp/server_plugins.md","filePath":"en/cpp/server_plugins.md"}'),t={name:"en/cpp/server_plugins.md"};function l(n,e,o,p,u,c){return i(),r("div",null,e[0]||(e[0]=[s('<h1 id="server-plugins" tabindex="-1">Server Plugins <a class="header-anchor" href="#server-plugins" aria-label="Permalink to &quot;Server Plugins&quot;">​</a></h1><p>MAVSDK <em>Server</em> plugins are used to expose MAVLink services on non-MAVLink flight stacks, companions computers, cameras, gimbals and other components.</p><p>The plugins listen for commands from a ground station or other MAVLink client, pass them to the underlying native system using callbacks, and respond as needed.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>They are called &quot;server&quot; plugins because they perform the server role in communication - listening for commands and responding. The client role is usually performed by a ground station (or &quot;ordinary&quot; MAVSDK plugin)</p></div><h2 id="adding-mavlink-support-to-your-vehicle" tabindex="-1">Adding MAVLink support to your vehicle <a class="header-anchor" href="#adding-mavlink-support-to-your-vehicle" aria-label="Permalink to &quot;Adding MAVLink support to your vehicle&quot;">​</a></h2><p>Adding MAVLink support to your vehicle is as simple as instantiating the required server plugin and actioning the vehicle on the appropriate callback.</p><h2 id="examples" tabindex="-1">Examples <a class="header-anchor" href="#examples" aria-label="Permalink to &quot;Examples&quot;">​</a></h2><p>The <a href="./examples/autopilot_server.html">Autopilot Server</a> example uses many different MAVSDK server plugins to replicate a simple vehicle and autopilot system, with telemetry, mission handling, parameters and more.</p><h2 id="plugins" tabindex="-1">Plugins <a class="header-anchor" href="#plugins" aria-label="Permalink to &quot;Plugins&quot;">​</a></h2><p>The plugins developed specifically for this case are usually suffixed with <code>Server</code>, e.g.:</p><ul><li><a href="./api_reference/classmavsdk_1_1_action_server.html">ActionServer</a></li><li><a href="./api_reference/classmavsdk_1_1_mission_raw_server.html">MissionRawServer</a></li><li><a href="./api_reference/classmavsdk_1_1_param_server.html">ParamServer</a></li><li><a href="./api_reference/classmavsdk_1_1_telemetry_server.html">TelemetryServer</a></li><li><a href="./api_reference/classmavsdk_1_1_tracking_server.html">TrackingServer</a></li></ul><p>These server plugins can potentially also be used to test the &quot;client&quot; plugins of MAVSDK in the future. The <a href="./examples/autopilot_server.html">Autopilot Server</a> example uses multiple MAVSDK instances in this way.</p>',12)]))}const d=a(t,[["render",l]]);export{h as __pageData,d as default};
