import{_ as s,c as a,al as e,o as t}from"./chunks/framework.BVh3rIuO.js";const u=JSON.parse('{"title":"Building MAVSDK on Windows","description":"","frontmatter":{"github_branch":"main"},"headers":[],"relativePath":"en/cpp/guide/build_windows.md","filePath":"en/cpp/guide/build_windows.md"}'),l={name:"en/cpp/guide/build_windows.md"};function n(h,i,d,o,r,p){return t(),a("div",null,i[0]||(i[0]=[e(`<h1 id="building-mavsdk-on-windows" tabindex="-1">Building MAVSDK on Windows <a class="header-anchor" href="#building-mavsdk-on-windows" aria-label="Permalink to &quot;Building MAVSDK on Windows&quot;">​</a></h1><p>This guide explains how to build MAVSDK from source on Windows systems.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Building using Cygwin or MinGW is not supported. These instructions are for building with MSVC (Microsoft Visual C++).</p></div><h2 id="requirements" tabindex="-1">Requirements <a class="header-anchor" href="#requirements" aria-label="Permalink to &quot;Requirements&quot;">​</a></h2><p>The build requirements are:</p><ul><li>Build Tools for Visual Studio 2022 (including Ninja)</li><li>CMake</li><li>Git</li><li>Perl (for OpenSSL unless building without CURL)</li><li>jom (optional) to parallelize the OpenSSL build</li></ul><h3 id="install-build-tools" tabindex="-1">Install Build Tools <a class="header-anchor" href="#install-build-tools" aria-label="Permalink to &quot;Install Build Tools&quot;">​</a></h3><ol><li><p>Install <a href="https://www.visualstudio.com/downloads/" target="_blank" rel="noreferrer">Build Tools for Visual Studio 2022</a></p><ul><li>Only the &quot;Visual C++ Build Tools&quot; are needed from the installer</li></ul></li><li><p>Install <a href="https://cmake.org/download/" target="_blank" rel="noreferrer">CMake</a></p><ul><li>Download and run the installer</li><li>Make sure to tick &quot;add to PATH&quot; during installation</li></ul></li><li><p>Install <a href="https://git-scm.com/download/win" target="_blank" rel="noreferrer">Git</a></p><ul><li>Choose any Git client you prefer</li></ul></li><li><p>Install <a href="https://strawberryperl.com/" target="_blank" rel="noreferrer">Strawberry Perl</a> (required for OpenSSL unless building without CURL and not mavsdk_server):</p><ul><li>After installation, you may want to modify the PATH to only include the Perl binary path, otherwise it will pick up cmake and libraries from the Strawberry Perl installation.</li><li>To edit Windows paths: <ol><li>Go to System -&gt; Advanced system settings -&gt; Environment Variables</li><li>Edit the System variable <code>Path</code></li><li>Remove <code>C:\\Strawberry\\c\\bin</code> and <code>C:\\Strawberry\\perl\\site\\bin</code></li><li>Keep only <code>C:\\Strawberry\\perl\\bin</code></li></ol></li></ul></li><li><p>(Optional) Install <a href="https://download.qt.io/official_releases/jom/" target="_blank" rel="noreferrer">jom</a> and add it to the path.</p></li></ol><h2 id="getting-the-source" tabindex="-1">Getting the Source <a class="header-anchor" href="#getting-the-source" aria-label="Permalink to &quot;Getting the Source&quot;">​</a></h2><p>Download the source using git:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/mavlink/MAVSDK.git</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> MAVSDK</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> submodule</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --init</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --recursive</span></span></code></pre></div><h2 id="building-the-mavsdk-library-only" tabindex="-1">Building the MAVSDK library only <a class="header-anchor" href="#building-the-mavsdk-library-only" aria-label="Permalink to &quot;Building the MAVSDK library only&quot;">​</a></h2><p>::: Tip Make sure to run this within the Visual Studio environment to access Ninja. You can either run the &quot;x64 Native Tools Command Prompt for VS 2022&quot; program or call the vcvarsall.bat script located in your Visual Studio 2022 installation directory: <code>C:\\Program Files\\Microsoft Visual Studio\\2022\\EDITION\\VC\\Auxiliary\\Build\\vcvarsall.bat</code> :::</p><h3 id="debug-build" tabindex="-1">Debug Build <a class="header-anchor" href="#debug-build" aria-label="Permalink to &quot;Debug Build&quot;">​</a></h3><p>For development, use the debug build:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cmake</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -GNinja</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -DCMAKE_BUILD_TYPE=Debug</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -Bbuild</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -S.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cmake</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --build</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Debug</span></span></code></pre></div><h3 id="release-build" tabindex="-1">Release Build <a class="header-anchor" href="#release-build" aria-label="Permalink to &quot;Release Build&quot;">​</a></h3><p>For production use, build with optimizations enabled:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cmake</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -GNinja</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -DCMAKE_BUILD_TYPE=Release</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -S.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -Bbuild</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cmake</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --build</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Release</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>It is not usual to use CMAKE_BUILD_TYPE on Windows (with MSVC), however, our build requires it for the dependencies which are built at configure time.</p></div><h3 id="shared-vs-static-library-build" tabindex="-1">Shared vs. static library build <a class="header-anchor" href="#shared-vs-static-library-build" aria-label="Permalink to &quot;Shared vs. static library build&quot;">​</a></h3><p>There are (at least) two ways to build the MAVSDK library:</p><ul><li>As a shared library (.dll) including all dependencies statically.</li><li>As a static library (.lib) <strong>not</strong> including the dependencies.</li></ul><p>By default a shared library (.dll) is built which is easier to handle because it can be used standalone.</p><p>If a static library needs to be built, this can be done using <code>-DCMAKE_BUILD_SHARED_LIBS=ON</code>. Note that a <code>mavsdk.lib</code> built this way does not &quot;contain&quot; the dependencies it was built with, so the CMAKE_PREFIX_PATH used to build the library needs to be passed to any binary which is built on top of it.</p><p>For instance, to build the examples, it looks like this:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cmake</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -GNinja</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -DCMAKE_BUILD_TYPE=RelWithDebInfo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -DCMAKE_INSTALL_PREFIX=install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -DBUILD_MAVSDK_SERVER=ON</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -DBUILD_SHARED_LIBS=OFF</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -DWERROR=ON</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -Bbuild</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -S.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cmake</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --build</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> RelWithDebInfo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --target</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span></span></code></pre></div><p>And now the examples need both dependencies: mavsdk.lib but also its transitive dependencies:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> examples</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cmake</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -G</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Ninja&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -DCMAKE_BUILD_TYPE=RelWithDebInfo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -DCMAKE_PREFIX_PATH=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;../install;../build/third_party/install&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -DCMAKE_INSTALL_PREFIX=install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -Bbuild</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -S.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cmake</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --build</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span></span></code></pre></div><h2 id="installation" tabindex="-1">Installation <a class="header-anchor" href="#installation" aria-label="Permalink to &quot;Installation&quot;">​</a></h2><h3 id="system-wide-installation" tabindex="-1">System-wide Installation <a class="header-anchor" href="#system-wide-installation" aria-label="Permalink to &quot;System-wide Installation&quot;">​</a></h3><p>To install system-wide (requires admin privileges):</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Run in command prompt with admin privileges</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cmake</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --build</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --target</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span></span></code></pre></div><h3 id="local-installation" tabindex="-1">Local Installation <a class="header-anchor" href="#local-installation" aria-label="Permalink to &quot;Local Installation&quot;">​</a></h3><p>To install to a custom location:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cmake</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -GNinja</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -DCMAKE_BUILD_TYPE=Release</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -DCMAKE_INSTALL_PREFIX=install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -Bbuild</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -S.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cmake</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --build</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --target</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span></span></code></pre></div><h2 id="build-mavsdk-server-binary-on-windows" tabindex="-1">Build mavsdk_server binary on Windows <a class="header-anchor" href="#build-mavsdk-server-binary-on-windows" aria-label="Permalink to &quot;Build mavsdk_server binary on Windows&quot;">​</a></h2><p>Language wrappers for MAVSDK other than C++ connect to the MAVSDK C++ core using gRPC. This gRPC server around the MAVSDK C++ library is called mavsdk_server (in the past it was referred to as the backend).</p><p>For more information about the architecture, also see <a href="./../contributing/autogen.html">how the auto-generation works</a>.</p><p>In order to include the mavsdk_server in the build, add <code>-DBUILD_MAVSDK_SERVER=ON</code>. In order to avoid a linking issue on Windows (where more than 65535 objects are present, we need to build all static libraries like so:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cmake</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -GNinja</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -DCMAKE_BUILD_TYPE=Release</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -DBUILD_SHARED_LIBS=OFF</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -DBUILD_MAVSDK_SERVER=ON</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -Bbuild</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -S.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cmake</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --build</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span></span></code></pre></div><h2 id="build-options" tabindex="-1">Build Options <a class="header-anchor" href="#build-options" aria-label="Permalink to &quot;Build Options&quot;">​</a></h2><p>During the configure step you can set various flags using <code>-DFLAG=Value</code>:</p><ul><li><code>CMAKE_BUILD_TYPE</code>: Choose between <code>Debug</code>, <code>Release</code>, or <code>RelWithDebInfo</code> build.</li><li><code>CMAKE_INSTALL_PREFIX</code>: Specify directory to install library artifacts</li><li><code>BUILD_SHARED_LIBS</code>: Set to <code>ON</code> for dynamic libraries (.dll), <code>OFF</code> for static libraries (.lib)</li><li><code>SUPERBUILD</code>: Set to <code>OFF</code> to use system dependencies instead of third party dependencies</li><li><code>CMAKE_PREFIX_PATH</code>: Set path where dependencies can be found if <code>SUPERBUILD</code> is <code>OFF</code></li><li><code>BUILD_MAVSDK_SERVER</code>: Set to <code>ON</code> to build mavsdk_server</li><li><code>BUILD_WITHOUT_CURL</code>: Set to <code>ON</code> to build without CURL support (avoids OpenSSL/Perl requirement)</li><li><code>WERROR</code>: Set to <code>ON</code> to treat warnings as errors</li></ul><h2 id="troubleshooting" tabindex="-1">Troubleshooting <a class="header-anchor" href="#troubleshooting" aria-label="Permalink to &quot;Troubleshooting&quot;">​</a></h2><h3 id="git-submodules-out-of-date" tabindex="-1">Git Submodules Out of Date <a class="header-anchor" href="#git-submodules-out-of-date" aria-label="Permalink to &quot;Git Submodules Out of Date&quot;">​</a></h3><p>If you encounter build issues, try updating the submodules:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> submodule</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --recursive</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -rf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span></span></code></pre></div><h3 id="build-without-curl" tabindex="-1">Build Without CURL <a class="header-anchor" href="#build-without-curl" aria-label="Permalink to &quot;Build Without CURL&quot;">​</a></h3><p>If you don&#39;t need http/https downloads for camera definition files or other component definition files, and you&#39;re not building the MAVSDK server (<code>BUILD_MAVSDK_SERVER=OFF</code>), you can exclude CURL and OpenSSL using:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cmake</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -GNinja</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -DBUILD_WITHOUT_CURL=ON</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -Bbuild</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -S.</span></span></code></pre></div><p>This eliminates the need for Perl/OpenSSL setup.</p>`,52)]))}const c=s(l,[["render",n]]);export{u as __pageData,c as default};
